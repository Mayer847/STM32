
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bc0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08002d60  08002d60  00012d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002db8  08002db8  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08002db8  08002db8  00012db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002dc0  08002dc0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dc0  08002dc0  00012dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dc4  08002dc4  00012dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002dc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000068  08002e30  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08002e30  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008a70  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001748  00000000  00000000  00028b4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a08  00000000  00000000  0002a298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007b2  00000000  00000000  0002aca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016933  00000000  00000000  0002b452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000adb1  00000000  00000000  00041d85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c407  00000000  00000000  0004cb36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000030e4  00000000  00000000  000d8f40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000dc024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002d48 	.word	0x08002d48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08002d48 	.word	0x08002d48

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
  */

extern void initialise_monitor_handles(void); //I am not sure what this is

int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
  uint8_t lastState = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	73fb      	strb	r3, [r7, #15]
  uint32_t lastEncoderValue = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	60bb      	str	r3, [r7, #8]

  /* Semihosting Initialization */
  initialise_monitor_handles();
 800058a:	f000 fa21 	bl	80009d0 <initialise_monitor_handles>

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 fb05 	bl	8000b9c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f84b 	bl	800062c <SystemClock_Config>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f000 f907 	bl	80007a8 <MX_GPIO_Init>
  MX_TIM2_Init();
 800059a:	f000 f8b1 	bl	8000700 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800059e:	213c      	movs	r1, #60	; 0x3c
 80005a0:	481d      	ldr	r0, [pc, #116]	; (8000618 <main+0x9c>)
 80005a2:	f001 faf7 	bl	8001b94 <HAL_TIM_Encoder_Start>
  /* USER CODE BEGIN WHILE */
  /* Infinite loop */
	while (1)
	{
	  // reads the current state of the GPIO pin (SW on the encoder)
	  uint8_t currentState = HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_2);
 80005a6:	2104      	movs	r1, #4
 80005a8:	481c      	ldr	r0, [pc, #112]	; (800061c <main+0xa0>)
 80005aa:	f000 fdf7 	bl	800119c <HAL_GPIO_ReadPin>
 80005ae:	4603      	mov	r3, r0
 80005b0:	71fb      	strb	r3, [r7, #7]
	  if(currentState != lastState)
 80005b2:	79fa      	ldrb	r2, [r7, #7]
 80005b4:	7bfb      	ldrb	r3, [r7, #15]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d011      	beq.n	80005de <main+0x62>
	  {
		  if(currentState)
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d006      	beq.n	80005ce <main+0x52>
		  {
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // Turn on LED
 80005c0:	2201      	movs	r2, #1
 80005c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c6:	4816      	ldr	r0, [pc, #88]	; (8000620 <main+0xa4>)
 80005c8:	f000 fe00 	bl	80011cc <HAL_GPIO_WritePin>
 80005cc:	e005      	b.n	80005da <main+0x5e>
		  }
		  else
		  {
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // Turn off LED
 80005ce:	2200      	movs	r2, #0
 80005d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d4:	4812      	ldr	r0, [pc, #72]	; (8000620 <main+0xa4>)
 80005d6:	f000 fdf9 	bl	80011cc <HAL_GPIO_WritePin>
		  }
		  lastState = currentState;
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	73fb      	strb	r3, [r7, #15]
	  }

	  // Print encoder value to console if it has changed
	  uint32_t currentEncoderValue = ((TIM2->CNT)>>2)%100;
 80005de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005e4:	089b      	lsrs	r3, r3, #2
 80005e6:	4a0f      	ldr	r2, [pc, #60]	; (8000624 <main+0xa8>)
 80005e8:	fba2 1203 	umull	r1, r2, r2, r3
 80005ec:	0952      	lsrs	r2, r2, #5
 80005ee:	2164      	movs	r1, #100	; 0x64
 80005f0:	fb01 f202 	mul.w	r2, r1, r2
 80005f4:	1a9b      	subs	r3, r3, r2
 80005f6:	603b      	str	r3, [r7, #0]
//	  TIM2->CNT % 100;
	  if(currentEncoderValue != lastEncoderValue)
 80005f8:	683a      	ldr	r2, [r7, #0]
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d006      	beq.n	800060e <main+0x92>
	  {
		  printf("Encoder Value: %d\n\r", (int)currentEncoderValue);
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	4619      	mov	r1, r3
 8000604:	4808      	ldr	r0, [pc, #32]	; (8000628 <main+0xac>)
 8000606:	f001 fd29 	bl	800205c <iprintf>
		  lastEncoderValue = currentEncoderValue;
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	60bb      	str	r3, [r7, #8]
	  }

	  HAL_Delay(100);
 800060e:	2064      	movs	r0, #100	; 0x64
 8000610:	f000 fb36 	bl	8000c80 <HAL_Delay>
	{
 8000614:	e7c7      	b.n	80005a6 <main+0x2a>
 8000616:	bf00      	nop
 8000618:	20000084 	.word	0x20000084
 800061c:	40020000 	.word	0x40020000
 8000620:	40020800 	.word	0x40020800
 8000624:	51eb851f 	.word	0x51eb851f
 8000628:	08002d60 	.word	0x08002d60

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	; 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2230      	movs	r2, #48	; 0x30
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f001 fd63 	bl	8002106 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	4b28      	ldr	r3, [pc, #160]	; (80006f8 <SystemClock_Config+0xcc>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	4a27      	ldr	r2, [pc, #156]	; (80006f8 <SystemClock_Config+0xcc>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	; 0x40
 8000660:	4b25      	ldr	r3, [pc, #148]	; (80006f8 <SystemClock_Config+0xcc>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	4b22      	ldr	r3, [pc, #136]	; (80006fc <SystemClock_Config+0xd0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000678:	4a20      	ldr	r2, [pc, #128]	; (80006fc <SystemClock_Config+0xd0>)
 800067a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4b1e      	ldr	r3, [pc, #120]	; (80006fc <SystemClock_Config+0xd0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800068c:	2302      	movs	r3, #2
 800068e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000690:	2301      	movs	r3, #1
 8000692:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000694:	2310      	movs	r3, #16
 8000696:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000698:	2302      	movs	r3, #2
 800069a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800069c:	2300      	movs	r3, #0
 800069e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006a0:	2308      	movs	r3, #8
 80006a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006a4:	2348      	movs	r3, #72	; 0x48
 80006a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ac:	2304      	movs	r3, #4
 80006ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f107 0320 	add.w	r3, r7, #32
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 fda3 	bl	8001200 <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006c0:	f000 f8e8 	bl	8000894 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	230f      	movs	r3, #15
 80006c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c8:	2302      	movs	r3, #2
 80006ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006da:	f107 030c 	add.w	r3, r7, #12
 80006de:	2102      	movs	r1, #2
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 f805 	bl	80016f0 <HAL_RCC_ClockConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006ec:	f000 f8d2 	bl	8000894 <Error_Handler>
  }
}
 80006f0:	bf00      	nop
 80006f2:	3750      	adds	r7, #80	; 0x50
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40007000 	.word	0x40007000

08000700 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08c      	sub	sp, #48	; 0x30
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	2224      	movs	r2, #36	; 0x24
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f001 fcf9 	bl	8002106 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800071c:	4b21      	ldr	r3, [pc, #132]	; (80007a4 <MX_TIM2_Init+0xa4>)
 800071e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000722:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 8000724:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <MX_TIM2_Init+0xa4>)
 8000726:	2204      	movs	r2, #4
 8000728:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800072a:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <MX_TIM2_Init+0xa4>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000730:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <MX_TIM2_Init+0xa4>)
 8000732:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000736:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000738:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <MX_TIM2_Init+0xa4>)
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800073e:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <MX_TIM2_Init+0xa4>)
 8000740:	2280      	movs	r2, #128	; 0x80
 8000742:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000744:	2303      	movs	r3, #3
 8000746:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000748:	2300      	movs	r3, #0
 800074a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800074c:	2301      	movs	r3, #1
 800074e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000754:	230a      	movs	r3, #10
 8000756:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000758:	2300      	movs	r3, #0
 800075a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800075c:	2301      	movs	r3, #1
 800075e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000764:	230a      	movs	r3, #10
 8000766:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	4619      	mov	r1, r3
 800076e:	480d      	ldr	r0, [pc, #52]	; (80007a4 <MX_TIM2_Init+0xa4>)
 8000770:	f001 f96a 	bl	8001a48 <HAL_TIM_Encoder_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800077a:	f000 f88b 	bl	8000894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	4619      	mov	r1, r3
 800078a:	4806      	ldr	r0, [pc, #24]	; (80007a4 <MX_TIM2_Init+0xa4>)
 800078c:	f001 fb36 	bl	8001dfc <HAL_TIMEx_MasterConfigSynchronization>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000796:	f000 f87d 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	3730      	adds	r7, #48	; 0x30
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000084 	.word	0x20000084

080007a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b088      	sub	sp, #32
 80007ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	f107 030c 	add.w	r3, r7, #12
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	4b31      	ldr	r3, [pc, #196]	; (8000888 <MX_GPIO_Init+0xe0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a30      	ldr	r2, [pc, #192]	; (8000888 <MX_GPIO_Init+0xe0>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b2e      	ldr	r3, [pc, #184]	; (8000888 <MX_GPIO_Init+0xe0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b2a      	ldr	r3, [pc, #168]	; (8000888 <MX_GPIO_Init+0xe0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a29      	ldr	r2, [pc, #164]	; (8000888 <MX_GPIO_Init+0xe0>)
 80007e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b27      	ldr	r3, [pc, #156]	; (8000888 <MX_GPIO_Init+0xe0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	4b23      	ldr	r3, [pc, #140]	; (8000888 <MX_GPIO_Init+0xe0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a22      	ldr	r2, [pc, #136]	; (8000888 <MX_GPIO_Init+0xe0>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b20      	ldr	r3, [pc, #128]	; (8000888 <MX_GPIO_Init+0xe0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000818:	481c      	ldr	r0, [pc, #112]	; (800088c <MX_GPIO_Init+0xe4>)
 800081a:	f000 fcd7 	bl	80011cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000824:	481a      	ldr	r0, [pc, #104]	; (8000890 <MX_GPIO_Init+0xe8>)
 8000826:	f000 fcd1 	bl	80011cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800082a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800082e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000830:	2301      	movs	r3, #1
 8000832:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	4619      	mov	r1, r3
 8000842:	4812      	ldr	r0, [pc, #72]	; (800088c <MX_GPIO_Init+0xe4>)
 8000844:	f000 fb26 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000848:	2304      	movs	r3, #4
 800084a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084c:	2300      	movs	r3, #0
 800084e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000854:	f107 030c 	add.w	r3, r7, #12
 8000858:	4619      	mov	r1, r3
 800085a:	480d      	ldr	r0, [pc, #52]	; (8000890 <MX_GPIO_Init+0xe8>)
 800085c:	f000 fb1a 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000860:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000864:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	4619      	mov	r1, r3
 8000878:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_GPIO_Init+0xe8>)
 800087a:	f000 fb0b 	bl	8000e94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800087e:	bf00      	nop
 8000880:	3720      	adds	r7, #32
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800
 800088c:	40020800 	.word	0x40020800
 8000890:	40020000 	.word	0x40020000

08000894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000898:	b672      	cpsid	i
}
 800089a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800089c:	e7fe      	b.n	800089c <Error_Handler+0x8>
	...

080008a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4b10      	ldr	r3, [pc, #64]	; (80008ec <HAL_MspInit+0x4c>)
 80008ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ae:	4a0f      	ldr	r2, [pc, #60]	; (80008ec <HAL_MspInit+0x4c>)
 80008b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b4:	6453      	str	r3, [r2, #68]	; 0x44
 80008b6:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <HAL_MspInit+0x4c>)
 80008b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	603b      	str	r3, [r7, #0]
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <HAL_MspInit+0x4c>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ca:	4a08      	ldr	r2, [pc, #32]	; (80008ec <HAL_MspInit+0x4c>)
 80008cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d0:	6413      	str	r3, [r2, #64]	; 0x40
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <HAL_MspInit+0x4c>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800

080008f0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	; 0x28
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000910:	d12b      	bne.n	800096a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	4b17      	ldr	r3, [pc, #92]	; (8000974 <HAL_TIM_Encoder_MspInit+0x84>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	4a16      	ldr	r2, [pc, #88]	; (8000974 <HAL_TIM_Encoder_MspInit+0x84>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6413      	str	r3, [r2, #64]	; 0x40
 8000922:	4b14      	ldr	r3, [pc, #80]	; (8000974 <HAL_TIM_Encoder_MspInit+0x84>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <HAL_TIM_Encoder_MspInit+0x84>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a0f      	ldr	r2, [pc, #60]	; (8000974 <HAL_TIM_Encoder_MspInit+0x84>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <HAL_TIM_Encoder_MspInit+0x84>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800094a:	2303      	movs	r3, #3
 800094c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800095a:	2301      	movs	r3, #1
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	4619      	mov	r1, r3
 8000964:	4804      	ldr	r0, [pc, #16]	; (8000978 <HAL_TIM_Encoder_MspInit+0x88>)
 8000966:	f000 fa95 	bl	8000e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800096a:	bf00      	nop
 800096c:	3728      	adds	r7, #40	; 0x28
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800
 8000978:	40020000 	.word	0x40020000

0800097c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <NMI_Handler+0x4>

08000982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <HardFault_Handler+0x4>

08000988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <MemManage_Handler+0x4>

0800098e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <BusFault_Handler+0x4>

08000994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <UsageFault_Handler+0x4>

0800099a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c8:	f000 f93a 	bl	8000c40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b086      	sub	sp, #24
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	60f8      	str	r0, [r7, #12]
 80009e6:	60b9      	str	r1, [r7, #8]
 80009e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]
 80009ee:	e00a      	b.n	8000a06 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009f0:	f3af 8000 	nop.w
 80009f4:	4601      	mov	r1, r0
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	1c5a      	adds	r2, r3, #1
 80009fa:	60ba      	str	r2, [r7, #8]
 80009fc:	b2ca      	uxtb	r2, r1
 80009fe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	3301      	adds	r3, #1
 8000a04:	617b      	str	r3, [r7, #20]
 8000a06:	697a      	ldr	r2, [r7, #20]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	dbf0      	blt.n	80009f0 <_read+0x12>
  }

  return len;
 8000a0e:	687b      	ldr	r3, [r7, #4]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3718      	adds	r7, #24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]
 8000a28:	e009      	b.n	8000a3e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	1c5a      	adds	r2, r3, #1
 8000a2e:	60ba      	str	r2, [r7, #8]
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	617b      	str	r3, [r7, #20]
 8000a3e:	697a      	ldr	r2, [r7, #20]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	dbf1      	blt.n	8000a2a <_write+0x12>
  }
  return len;
 8000a46:	687b      	ldr	r3, [r7, #4]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3718      	adds	r7, #24
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <_close>:

int _close(int file)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a78:	605a      	str	r2, [r3, #4]
  return 0;
 8000a7a:	2300      	movs	r3, #0
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <_isatty>:

int _isatty(int file)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a90:	2301      	movs	r3, #1
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	b085      	sub	sp, #20
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	60f8      	str	r0, [r7, #12]
 8000aa6:	60b9      	str	r1, [r7, #8]
 8000aa8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000aaa:	2300      	movs	r3, #0
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3714      	adds	r7, #20
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ac0:	4a14      	ldr	r2, [pc, #80]	; (8000b14 <_sbrk+0x5c>)
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <_sbrk+0x60>)
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000acc:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <_sbrk+0x64>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d102      	bne.n	8000ada <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ad4:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <_sbrk+0x64>)
 8000ad6:	4a12      	ldr	r2, [pc, #72]	; (8000b20 <_sbrk+0x68>)
 8000ad8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <_sbrk+0x64>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d207      	bcs.n	8000af8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ae8:	f001 fb5c 	bl	80021a4 <__errno>
 8000aec:	4603      	mov	r3, r0
 8000aee:	220c      	movs	r2, #12
 8000af0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000af2:	f04f 33ff 	mov.w	r3, #4294967295
 8000af6:	e009      	b.n	8000b0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <_sbrk+0x64>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000afe:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <_sbrk+0x64>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4413      	add	r3, r2
 8000b06:	4a05      	ldr	r2, [pc, #20]	; (8000b1c <_sbrk+0x64>)
 8000b08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3718      	adds	r7, #24
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20010000 	.word	0x20010000
 8000b18:	00000400 	.word	0x00000400
 8000b1c:	200000cc 	.word	0x200000cc
 8000b20:	20000220 	.word	0x20000220

08000b24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <SystemInit+0x20>)
 8000b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b2e:	4a05      	ldr	r2, [pc, #20]	; (8000b44 <SystemInit+0x20>)
 8000b30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b4c:	480d      	ldr	r0, [pc, #52]	; (8000b84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b4e:	490e      	ldr	r1, [pc, #56]	; (8000b88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b50:	4a0e      	ldr	r2, [pc, #56]	; (8000b8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b54:	e002      	b.n	8000b5c <LoopCopyDataInit>

08000b56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5a:	3304      	adds	r3, #4

08000b5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b60:	d3f9      	bcc.n	8000b56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b62:	4a0b      	ldr	r2, [pc, #44]	; (8000b90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b64:	4c0b      	ldr	r4, [pc, #44]	; (8000b94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b68:	e001      	b.n	8000b6e <LoopFillZerobss>

08000b6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b6c:	3204      	adds	r2, #4

08000b6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b70:	d3fb      	bcc.n	8000b6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b72:	f7ff ffd7 	bl	8000b24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b76:	f001 fb1b 	bl	80021b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b7a:	f7ff fcff 	bl	800057c <main>
  bx  lr    
 8000b7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b80:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b88:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b8c:	08002dc8 	.word	0x08002dc8
  ldr r2, =_sbss
 8000b90:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b94:	20000220 	.word	0x20000220

08000b98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b98:	e7fe      	b.n	8000b98 <ADC_IRQHandler>
	...

08000b9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <HAL_Init+0x40>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a0d      	ldr	r2, [pc, #52]	; (8000bdc <HAL_Init+0x40>)
 8000ba6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000baa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bac:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <HAL_Init+0x40>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <HAL_Init+0x40>)
 8000bb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bb8:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <HAL_Init+0x40>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a07      	ldr	r2, [pc, #28]	; (8000bdc <HAL_Init+0x40>)
 8000bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc4:	2003      	movs	r0, #3
 8000bc6:	f000 f931 	bl	8000e2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bca:	200f      	movs	r0, #15
 8000bcc:	f000 f808 	bl	8000be0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd0:	f7ff fe66 	bl	80008a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40023c00 	.word	0x40023c00

08000be0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000be8:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <HAL_InitTick+0x54>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <HAL_InitTick+0x58>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 f93b 	bl	8000e7a <HAL_SYSTICK_Config>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e00e      	b.n	8000c2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2b0f      	cmp	r3, #15
 8000c12:	d80a      	bhi.n	8000c2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c14:	2200      	movs	r2, #0
 8000c16:	6879      	ldr	r1, [r7, #4]
 8000c18:	f04f 30ff 	mov.w	r0, #4294967295
 8000c1c:	f000 f911 	bl	8000e42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c20:	4a06      	ldr	r2, [pc, #24]	; (8000c3c <HAL_InitTick+0x5c>)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c26:	2300      	movs	r3, #0
 8000c28:	e000      	b.n	8000c2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000000 	.word	0x20000000
 8000c38:	20000008 	.word	0x20000008
 8000c3c:	20000004 	.word	0x20000004

08000c40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <HAL_IncTick+0x20>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_IncTick+0x24>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4413      	add	r3, r2
 8000c50:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <HAL_IncTick+0x24>)
 8000c52:	6013      	str	r3, [r2, #0]
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	20000008 	.word	0x20000008
 8000c64:	200000d0 	.word	0x200000d0

08000c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c6c:	4b03      	ldr	r3, [pc, #12]	; (8000c7c <HAL_GetTick+0x14>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	200000d0 	.word	0x200000d0

08000c80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c88:	f7ff ffee 	bl	8000c68 <HAL_GetTick>
 8000c8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c98:	d005      	beq.n	8000ca6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c9a:	4b0a      	ldr	r3, [pc, #40]	; (8000cc4 <HAL_Delay+0x44>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ca6:	bf00      	nop
 8000ca8:	f7ff ffde 	bl	8000c68 <HAL_GetTick>
 8000cac:	4602      	mov	r2, r0
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d8f7      	bhi.n	8000ca8 <HAL_Delay+0x28>
  {
  }
}
 8000cb8:	bf00      	nop
 8000cba:	bf00      	nop
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000008 	.word	0x20000008

08000cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <__NVIC_SetPriorityGrouping+0x44>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cde:	68ba      	ldr	r2, [r7, #8]
 8000ce0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cfa:	4a04      	ldr	r2, [pc, #16]	; (8000d0c <__NVIC_SetPriorityGrouping+0x44>)
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	60d3      	str	r3, [r2, #12]
}
 8000d00:	bf00      	nop
 8000d02:	3714      	adds	r7, #20
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d14:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <__NVIC_GetPriorityGrouping+0x18>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	0a1b      	lsrs	r3, r3, #8
 8000d1a:	f003 0307 	and.w	r3, r3, #7
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	6039      	str	r1, [r7, #0]
 8000d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	db0a      	blt.n	8000d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	490c      	ldr	r1, [pc, #48]	; (8000d78 <__NVIC_SetPriority+0x4c>)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	0112      	lsls	r2, r2, #4
 8000d4c:	b2d2      	uxtb	r2, r2
 8000d4e:	440b      	add	r3, r1
 8000d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d54:	e00a      	b.n	8000d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4908      	ldr	r1, [pc, #32]	; (8000d7c <__NVIC_SetPriority+0x50>)
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	f003 030f 	and.w	r3, r3, #15
 8000d62:	3b04      	subs	r3, #4
 8000d64:	0112      	lsls	r2, r2, #4
 8000d66:	b2d2      	uxtb	r2, r2
 8000d68:	440b      	add	r3, r1
 8000d6a:	761a      	strb	r2, [r3, #24]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000e100 	.word	0xe000e100
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b089      	sub	sp, #36	; 0x24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	f1c3 0307 	rsb	r3, r3, #7
 8000d9a:	2b04      	cmp	r3, #4
 8000d9c:	bf28      	it	cs
 8000d9e:	2304      	movcs	r3, #4
 8000da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3304      	adds	r3, #4
 8000da6:	2b06      	cmp	r3, #6
 8000da8:	d902      	bls.n	8000db0 <NVIC_EncodePriority+0x30>
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3b03      	subs	r3, #3
 8000dae:	e000      	b.n	8000db2 <NVIC_EncodePriority+0x32>
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	f04f 32ff 	mov.w	r2, #4294967295
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	43da      	mvns	r2, r3
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	401a      	ands	r2, r3
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd2:	43d9      	mvns	r1, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd8:	4313      	orrs	r3, r2
         );
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3724      	adds	r7, #36	; 0x24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
	...

08000de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000df8:	d301      	bcc.n	8000dfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e00f      	b.n	8000e1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <SysTick_Config+0x40>)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e06:	210f      	movs	r1, #15
 8000e08:	f04f 30ff 	mov.w	r0, #4294967295
 8000e0c:	f7ff ff8e 	bl	8000d2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e10:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <SysTick_Config+0x40>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e16:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <SysTick_Config+0x40>)
 8000e18:	2207      	movs	r2, #7
 8000e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	e000e010 	.word	0xe000e010

08000e2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f7ff ff47 	bl	8000cc8 <__NVIC_SetPriorityGrouping>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b086      	sub	sp, #24
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	4603      	mov	r3, r0
 8000e4a:	60b9      	str	r1, [r7, #8]
 8000e4c:	607a      	str	r2, [r7, #4]
 8000e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e54:	f7ff ff5c 	bl	8000d10 <__NVIC_GetPriorityGrouping>
 8000e58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	68b9      	ldr	r1, [r7, #8]
 8000e5e:	6978      	ldr	r0, [r7, #20]
 8000e60:	f7ff ff8e 	bl	8000d80 <NVIC_EncodePriority>
 8000e64:	4602      	mov	r2, r0
 8000e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6a:	4611      	mov	r1, r2
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff5d 	bl	8000d2c <__NVIC_SetPriority>
}
 8000e72:	bf00      	nop
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff ffb0 	bl	8000de8 <SysTick_Config>
 8000e88:	4603      	mov	r3, r0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b089      	sub	sp, #36	; 0x24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
 8000eae:	e159      	b.n	8001164 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	697a      	ldr	r2, [r7, #20]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	f040 8148 	bne.w	800115e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f003 0303 	and.w	r3, r3, #3
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d005      	beq.n	8000ee6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d130      	bne.n	8000f48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4013      	ands	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	68da      	ldr	r2, [r3, #12]
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	091b      	lsrs	r3, r3, #4
 8000f32:	f003 0201 	and.w	r2, r3, #1
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 0303 	and.w	r3, r3, #3
 8000f50:	2b03      	cmp	r3, #3
 8000f52:	d017      	beq.n	8000f84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	2203      	movs	r2, #3
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	689a      	ldr	r2, [r3, #8]
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 0303 	and.w	r3, r3, #3
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d123      	bne.n	8000fd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	08da      	lsrs	r2, r3, #3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3208      	adds	r2, #8
 8000f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	f003 0307 	and.w	r3, r3, #7
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	220f      	movs	r2, #15
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	691a      	ldr	r2, [r3, #16]
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	08da      	lsrs	r2, r3, #3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3208      	adds	r2, #8
 8000fd2:	69b9      	ldr	r1, [r7, #24]
 8000fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 0203 	and.w	r2, r3, #3
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001014:	2b00      	cmp	r3, #0
 8001016:	f000 80a2 	beq.w	800115e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b57      	ldr	r3, [pc, #348]	; (800117c <HAL_GPIO_Init+0x2e8>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	4a56      	ldr	r2, [pc, #344]	; (800117c <HAL_GPIO_Init+0x2e8>)
 8001024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001028:	6453      	str	r3, [r2, #68]	; 0x44
 800102a:	4b54      	ldr	r3, [pc, #336]	; (800117c <HAL_GPIO_Init+0x2e8>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001036:	4a52      	ldr	r2, [pc, #328]	; (8001180 <HAL_GPIO_Init+0x2ec>)
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	089b      	lsrs	r3, r3, #2
 800103c:	3302      	adds	r3, #2
 800103e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001042:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	220f      	movs	r2, #15
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43db      	mvns	r3, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4013      	ands	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a49      	ldr	r2, [pc, #292]	; (8001184 <HAL_GPIO_Init+0x2f0>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d019      	beq.n	8001096 <HAL_GPIO_Init+0x202>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a48      	ldr	r2, [pc, #288]	; (8001188 <HAL_GPIO_Init+0x2f4>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d013      	beq.n	8001092 <HAL_GPIO_Init+0x1fe>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a47      	ldr	r2, [pc, #284]	; (800118c <HAL_GPIO_Init+0x2f8>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d00d      	beq.n	800108e <HAL_GPIO_Init+0x1fa>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a46      	ldr	r2, [pc, #280]	; (8001190 <HAL_GPIO_Init+0x2fc>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d007      	beq.n	800108a <HAL_GPIO_Init+0x1f6>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a45      	ldr	r2, [pc, #276]	; (8001194 <HAL_GPIO_Init+0x300>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d101      	bne.n	8001086 <HAL_GPIO_Init+0x1f2>
 8001082:	2304      	movs	r3, #4
 8001084:	e008      	b.n	8001098 <HAL_GPIO_Init+0x204>
 8001086:	2307      	movs	r3, #7
 8001088:	e006      	b.n	8001098 <HAL_GPIO_Init+0x204>
 800108a:	2303      	movs	r3, #3
 800108c:	e004      	b.n	8001098 <HAL_GPIO_Init+0x204>
 800108e:	2302      	movs	r3, #2
 8001090:	e002      	b.n	8001098 <HAL_GPIO_Init+0x204>
 8001092:	2301      	movs	r3, #1
 8001094:	e000      	b.n	8001098 <HAL_GPIO_Init+0x204>
 8001096:	2300      	movs	r3, #0
 8001098:	69fa      	ldr	r2, [r7, #28]
 800109a:	f002 0203 	and.w	r2, r2, #3
 800109e:	0092      	lsls	r2, r2, #2
 80010a0:	4093      	lsls	r3, r2
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010a8:	4935      	ldr	r1, [pc, #212]	; (8001180 <HAL_GPIO_Init+0x2ec>)
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	089b      	lsrs	r3, r3, #2
 80010ae:	3302      	adds	r3, #2
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010b6:	4b38      	ldr	r3, [pc, #224]	; (8001198 <HAL_GPIO_Init+0x304>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	43db      	mvns	r3, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4013      	ands	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010da:	4a2f      	ldr	r2, [pc, #188]	; (8001198 <HAL_GPIO_Init+0x304>)
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010e0:	4b2d      	ldr	r3, [pc, #180]	; (8001198 <HAL_GPIO_Init+0x304>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d003      	beq.n	8001104 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001104:	4a24      	ldr	r2, [pc, #144]	; (8001198 <HAL_GPIO_Init+0x304>)
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800110a:	4b23      	ldr	r3, [pc, #140]	; (8001198 <HAL_GPIO_Init+0x304>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800112e:	4a1a      	ldr	r2, [pc, #104]	; (8001198 <HAL_GPIO_Init+0x304>)
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001134:	4b18      	ldr	r3, [pc, #96]	; (8001198 <HAL_GPIO_Init+0x304>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	4313      	orrs	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001158:	4a0f      	ldr	r2, [pc, #60]	; (8001198 <HAL_GPIO_Init+0x304>)
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3301      	adds	r3, #1
 8001162:	61fb      	str	r3, [r7, #28]
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	2b0f      	cmp	r3, #15
 8001168:	f67f aea2 	bls.w	8000eb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	3724      	adds	r7, #36	; 0x24
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	40023800 	.word	0x40023800
 8001180:	40013800 	.word	0x40013800
 8001184:	40020000 	.word	0x40020000
 8001188:	40020400 	.word	0x40020400
 800118c:	40020800 	.word	0x40020800
 8001190:	40020c00 	.word	0x40020c00
 8001194:	40021000 	.word	0x40021000
 8001198:	40013c00 	.word	0x40013c00

0800119c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	691a      	ldr	r2, [r3, #16]
 80011ac:	887b      	ldrh	r3, [r7, #2]
 80011ae:	4013      	ands	r3, r2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d002      	beq.n	80011ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011b4:	2301      	movs	r3, #1
 80011b6:	73fb      	strb	r3, [r7, #15]
 80011b8:	e001      	b.n	80011be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011ba:	2300      	movs	r3, #0
 80011bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011be:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	807b      	strh	r3, [r7, #2]
 80011d8:	4613      	mov	r3, r2
 80011da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011dc:	787b      	ldrb	r3, [r7, #1]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011e2:	887a      	ldrh	r2, [r7, #2]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011e8:	e003      	b.n	80011f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011ea:	887b      	ldrh	r3, [r7, #2]
 80011ec:	041a      	lsls	r2, r3, #16
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	619a      	str	r2, [r3, #24]
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
	...

08001200 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d101      	bne.n	8001212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e267      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	2b00      	cmp	r3, #0
 800121c:	d075      	beq.n	800130a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800121e:	4b88      	ldr	r3, [pc, #544]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f003 030c 	and.w	r3, r3, #12
 8001226:	2b04      	cmp	r3, #4
 8001228:	d00c      	beq.n	8001244 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800122a:	4b85      	ldr	r3, [pc, #532]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001232:	2b08      	cmp	r3, #8
 8001234:	d112      	bne.n	800125c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001236:	4b82      	ldr	r3, [pc, #520]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800123e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001242:	d10b      	bne.n	800125c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001244:	4b7e      	ldr	r3, [pc, #504]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d05b      	beq.n	8001308 <HAL_RCC_OscConfig+0x108>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d157      	bne.n	8001308 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e242      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001264:	d106      	bne.n	8001274 <HAL_RCC_OscConfig+0x74>
 8001266:	4b76      	ldr	r3, [pc, #472]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a75      	ldr	r2, [pc, #468]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 800126c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	e01d      	b.n	80012b0 <HAL_RCC_OscConfig+0xb0>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800127c:	d10c      	bne.n	8001298 <HAL_RCC_OscConfig+0x98>
 800127e:	4b70      	ldr	r3, [pc, #448]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a6f      	ldr	r2, [pc, #444]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001288:	6013      	str	r3, [r2, #0]
 800128a:	4b6d      	ldr	r3, [pc, #436]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a6c      	ldr	r2, [pc, #432]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	e00b      	b.n	80012b0 <HAL_RCC_OscConfig+0xb0>
 8001298:	4b69      	ldr	r3, [pc, #420]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a68      	ldr	r2, [pc, #416]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 800129e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	4b66      	ldr	r3, [pc, #408]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a65      	ldr	r2, [pc, #404]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 80012aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d013      	beq.n	80012e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b8:	f7ff fcd6 	bl	8000c68 <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c0:	f7ff fcd2 	bl	8000c68 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b64      	cmp	r3, #100	; 0x64
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e207      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d2:	4b5b      	ldr	r3, [pc, #364]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d0f0      	beq.n	80012c0 <HAL_RCC_OscConfig+0xc0>
 80012de:	e014      	b.n	800130a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e0:	f7ff fcc2 	bl	8000c68 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012e8:	f7ff fcbe 	bl	8000c68 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b64      	cmp	r3, #100	; 0x64
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e1f3      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012fa:	4b51      	ldr	r3, [pc, #324]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f0      	bne.n	80012e8 <HAL_RCC_OscConfig+0xe8>
 8001306:	e000      	b.n	800130a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d063      	beq.n	80013de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001316:	4b4a      	ldr	r3, [pc, #296]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f003 030c 	and.w	r3, r3, #12
 800131e:	2b00      	cmp	r3, #0
 8001320:	d00b      	beq.n	800133a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001322:	4b47      	ldr	r3, [pc, #284]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800132a:	2b08      	cmp	r3, #8
 800132c:	d11c      	bne.n	8001368 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800132e:	4b44      	ldr	r3, [pc, #272]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d116      	bne.n	8001368 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800133a:	4b41      	ldr	r3, [pc, #260]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d005      	beq.n	8001352 <HAL_RCC_OscConfig+0x152>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d001      	beq.n	8001352 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e1c7      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001352:	4b3b      	ldr	r3, [pc, #236]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	691b      	ldr	r3, [r3, #16]
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	4937      	ldr	r1, [pc, #220]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001362:	4313      	orrs	r3, r2
 8001364:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001366:	e03a      	b.n	80013de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d020      	beq.n	80013b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001370:	4b34      	ldr	r3, [pc, #208]	; (8001444 <HAL_RCC_OscConfig+0x244>)
 8001372:	2201      	movs	r2, #1
 8001374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001376:	f7ff fc77 	bl	8000c68 <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800137e:	f7ff fc73 	bl	8000c68 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e1a8      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001390:	4b2b      	ldr	r3, [pc, #172]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0f0      	beq.n	800137e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139c:	4b28      	ldr	r3, [pc, #160]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	4925      	ldr	r1, [pc, #148]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 80013ac:	4313      	orrs	r3, r2
 80013ae:	600b      	str	r3, [r1, #0]
 80013b0:	e015      	b.n	80013de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013b2:	4b24      	ldr	r3, [pc, #144]	; (8001444 <HAL_RCC_OscConfig+0x244>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b8:	f7ff fc56 	bl	8000c68 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013c0:	f7ff fc52 	bl	8000c68 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e187      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013d2:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f0      	bne.n	80013c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0308 	and.w	r3, r3, #8
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d036      	beq.n	8001458 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d016      	beq.n	8001420 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013f2:	4b15      	ldr	r3, [pc, #84]	; (8001448 <HAL_RCC_OscConfig+0x248>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013f8:	f7ff fc36 	bl	8000c68 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001400:	f7ff fc32 	bl	8000c68 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e167      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <HAL_RCC_OscConfig+0x240>)
 8001414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0f0      	beq.n	8001400 <HAL_RCC_OscConfig+0x200>
 800141e:	e01b      	b.n	8001458 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <HAL_RCC_OscConfig+0x248>)
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001426:	f7ff fc1f 	bl	8000c68 <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800142c:	e00e      	b.n	800144c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800142e:	f7ff fc1b 	bl	8000c68 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d907      	bls.n	800144c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e150      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
 8001440:	40023800 	.word	0x40023800
 8001444:	42470000 	.word	0x42470000
 8001448:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800144c:	4b88      	ldr	r3, [pc, #544]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800144e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1ea      	bne.n	800142e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	2b00      	cmp	r3, #0
 8001462:	f000 8097 	beq.w	8001594 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001466:	2300      	movs	r3, #0
 8001468:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800146a:	4b81      	ldr	r3, [pc, #516]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d10f      	bne.n	8001496 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	4b7d      	ldr	r3, [pc, #500]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	4a7c      	ldr	r2, [pc, #496]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 8001480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001484:	6413      	str	r3, [r2, #64]	; 0x40
 8001486:	4b7a      	ldr	r3, [pc, #488]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001492:	2301      	movs	r3, #1
 8001494:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001496:	4b77      	ldr	r3, [pc, #476]	; (8001674 <HAL_RCC_OscConfig+0x474>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d118      	bne.n	80014d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014a2:	4b74      	ldr	r3, [pc, #464]	; (8001674 <HAL_RCC_OscConfig+0x474>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a73      	ldr	r2, [pc, #460]	; (8001674 <HAL_RCC_OscConfig+0x474>)
 80014a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ae:	f7ff fbdb 	bl	8000c68 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014b6:	f7ff fbd7 	bl	8000c68 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e10c      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c8:	4b6a      	ldr	r3, [pc, #424]	; (8001674 <HAL_RCC_OscConfig+0x474>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0f0      	beq.n	80014b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d106      	bne.n	80014ea <HAL_RCC_OscConfig+0x2ea>
 80014dc:	4b64      	ldr	r3, [pc, #400]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 80014de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e0:	4a63      	ldr	r2, [pc, #396]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6713      	str	r3, [r2, #112]	; 0x70
 80014e8:	e01c      	b.n	8001524 <HAL_RCC_OscConfig+0x324>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	2b05      	cmp	r3, #5
 80014f0:	d10c      	bne.n	800150c <HAL_RCC_OscConfig+0x30c>
 80014f2:	4b5f      	ldr	r3, [pc, #380]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 80014f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f6:	4a5e      	ldr	r2, [pc, #376]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 80014f8:	f043 0304 	orr.w	r3, r3, #4
 80014fc:	6713      	str	r3, [r2, #112]	; 0x70
 80014fe:	4b5c      	ldr	r3, [pc, #368]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 8001500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001502:	4a5b      	ldr	r2, [pc, #364]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6713      	str	r3, [r2, #112]	; 0x70
 800150a:	e00b      	b.n	8001524 <HAL_RCC_OscConfig+0x324>
 800150c:	4b58      	ldr	r3, [pc, #352]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800150e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001510:	4a57      	ldr	r2, [pc, #348]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 8001512:	f023 0301 	bic.w	r3, r3, #1
 8001516:	6713      	str	r3, [r2, #112]	; 0x70
 8001518:	4b55      	ldr	r3, [pc, #340]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800151a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151c:	4a54      	ldr	r2, [pc, #336]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800151e:	f023 0304 	bic.w	r3, r3, #4
 8001522:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d015      	beq.n	8001558 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800152c:	f7ff fb9c 	bl	8000c68 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001532:	e00a      	b.n	800154a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001534:	f7ff fb98 	bl	8000c68 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001542:	4293      	cmp	r3, r2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e0cb      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800154a:	4b49      	ldr	r3, [pc, #292]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800154c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0ee      	beq.n	8001534 <HAL_RCC_OscConfig+0x334>
 8001556:	e014      	b.n	8001582 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001558:	f7ff fb86 	bl	8000c68 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800155e:	e00a      	b.n	8001576 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001560:	f7ff fb82 	bl	8000c68 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	f241 3288 	movw	r2, #5000	; 0x1388
 800156e:	4293      	cmp	r3, r2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e0b5      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001576:	4b3e      	ldr	r3, [pc, #248]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 8001578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1ee      	bne.n	8001560 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001582:	7dfb      	ldrb	r3, [r7, #23]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d105      	bne.n	8001594 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001588:	4b39      	ldr	r3, [pc, #228]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	4a38      	ldr	r2, [pc, #224]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800158e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001592:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 80a1 	beq.w	80016e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800159e:	4b34      	ldr	r3, [pc, #208]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f003 030c 	and.w	r3, r3, #12
 80015a6:	2b08      	cmp	r3, #8
 80015a8:	d05c      	beq.n	8001664 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d141      	bne.n	8001636 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b2:	4b31      	ldr	r3, [pc, #196]	; (8001678 <HAL_RCC_OscConfig+0x478>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b8:	f7ff fb56 	bl	8000c68 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c0:	f7ff fb52 	bl	8000c68 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e087      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d2:	4b27      	ldr	r3, [pc, #156]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f0      	bne.n	80015c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	69da      	ldr	r2, [r3, #28]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	431a      	orrs	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ec:	019b      	lsls	r3, r3, #6
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f4:	085b      	lsrs	r3, r3, #1
 80015f6:	3b01      	subs	r3, #1
 80015f8:	041b      	lsls	r3, r3, #16
 80015fa:	431a      	orrs	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001600:	061b      	lsls	r3, r3, #24
 8001602:	491b      	ldr	r1, [pc, #108]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 8001604:	4313      	orrs	r3, r2
 8001606:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001608:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <HAL_RCC_OscConfig+0x478>)
 800160a:	2201      	movs	r2, #1
 800160c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160e:	f7ff fb2b 	bl	8000c68 <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001616:	f7ff fb27 	bl	8000c68 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e05c      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001628:	4b11      	ldr	r3, [pc, #68]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0f0      	beq.n	8001616 <HAL_RCC_OscConfig+0x416>
 8001634:	e054      	b.n	80016e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001636:	4b10      	ldr	r3, [pc, #64]	; (8001678 <HAL_RCC_OscConfig+0x478>)
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163c:	f7ff fb14 	bl	8000c68 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001644:	f7ff fb10 	bl	8000c68 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e045      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_RCC_OscConfig+0x470>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f0      	bne.n	8001644 <HAL_RCC_OscConfig+0x444>
 8001662:	e03d      	b.n	80016e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d107      	bne.n	800167c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e038      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
 8001670:	40023800 	.word	0x40023800
 8001674:	40007000 	.word	0x40007000
 8001678:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800167c:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <HAL_RCC_OscConfig+0x4ec>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d028      	beq.n	80016dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001694:	429a      	cmp	r2, r3
 8001696:	d121      	bne.n	80016dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d11a      	bne.n	80016dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016ac:	4013      	ands	r3, r2
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d111      	bne.n	80016dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c2:	085b      	lsrs	r3, r3, #1
 80016c4:	3b01      	subs	r3, #1
 80016c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d107      	bne.n	80016dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016d8:	429a      	cmp	r2, r3
 80016da:	d001      	beq.n	80016e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e000      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40023800 	.word	0x40023800

080016f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d101      	bne.n	8001704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e0cc      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001704:	4b68      	ldr	r3, [pc, #416]	; (80018a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0307 	and.w	r3, r3, #7
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	429a      	cmp	r2, r3
 8001710:	d90c      	bls.n	800172c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001712:	4b65      	ldr	r3, [pc, #404]	; (80018a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800171a:	4b63      	ldr	r3, [pc, #396]	; (80018a8 <HAL_RCC_ClockConfig+0x1b8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	429a      	cmp	r2, r3
 8001726:	d001      	beq.n	800172c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e0b8      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d020      	beq.n	800177a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	d005      	beq.n	8001750 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001744:	4b59      	ldr	r3, [pc, #356]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	4a58      	ldr	r2, [pc, #352]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800174e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0308 	and.w	r3, r3, #8
 8001758:	2b00      	cmp	r3, #0
 800175a:	d005      	beq.n	8001768 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800175c:	4b53      	ldr	r3, [pc, #332]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	4a52      	ldr	r2, [pc, #328]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001762:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001766:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001768:	4b50      	ldr	r3, [pc, #320]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	494d      	ldr	r1, [pc, #308]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	4313      	orrs	r3, r2
 8001778:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b00      	cmp	r3, #0
 8001784:	d044      	beq.n	8001810 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d107      	bne.n	800179e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178e:	4b47      	ldr	r3, [pc, #284]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d119      	bne.n	80017ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e07f      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d003      	beq.n	80017ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	d107      	bne.n	80017be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ae:	4b3f      	ldr	r3, [pc, #252]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d109      	bne.n	80017ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e06f      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017be:	4b3b      	ldr	r3, [pc, #236]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e067      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ce:	4b37      	ldr	r3, [pc, #220]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f023 0203 	bic.w	r2, r3, #3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	4934      	ldr	r1, [pc, #208]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017e0:	f7ff fa42 	bl	8000c68 <HAL_GetTick>
 80017e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017e6:	e00a      	b.n	80017fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e8:	f7ff fa3e 	bl	8000c68 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e04f      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017fe:	4b2b      	ldr	r3, [pc, #172]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 020c 	and.w	r2, r3, #12
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	429a      	cmp	r2, r3
 800180e:	d1eb      	bne.n	80017e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001810:	4b25      	ldr	r3, [pc, #148]	; (80018a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	429a      	cmp	r2, r3
 800181c:	d20c      	bcs.n	8001838 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181e:	4b22      	ldr	r3, [pc, #136]	; (80018a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001826:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	429a      	cmp	r2, r3
 8001832:	d001      	beq.n	8001838 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e032      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b00      	cmp	r3, #0
 8001842:	d008      	beq.n	8001856 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001844:	4b19      	ldr	r3, [pc, #100]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	4916      	ldr	r1, [pc, #88]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001852:	4313      	orrs	r3, r2
 8001854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0308 	and.w	r3, r3, #8
 800185e:	2b00      	cmp	r3, #0
 8001860:	d009      	beq.n	8001876 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001862:	4b12      	ldr	r3, [pc, #72]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	490e      	ldr	r1, [pc, #56]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001872:	4313      	orrs	r3, r2
 8001874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001876:	f000 f821 	bl	80018bc <HAL_RCC_GetSysClockFreq>
 800187a:	4602      	mov	r2, r0
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	091b      	lsrs	r3, r3, #4
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	490a      	ldr	r1, [pc, #40]	; (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001888:	5ccb      	ldrb	r3, [r1, r3]
 800188a:	fa22 f303 	lsr.w	r3, r2, r3
 800188e:	4a09      	ldr	r2, [pc, #36]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001892:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff f9a2 	bl	8000be0 <HAL_InitTick>

  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40023c00 	.word	0x40023c00
 80018ac:	40023800 	.word	0x40023800
 80018b0:	08002d74 	.word	0x08002d74
 80018b4:	20000000 	.word	0x20000000
 80018b8:	20000004 	.word	0x20000004

080018bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018c0:	b090      	sub	sp, #64	; 0x40
 80018c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	637b      	str	r3, [r7, #52]	; 0x34
 80018c8:	2300      	movs	r3, #0
 80018ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018cc:	2300      	movs	r3, #0
 80018ce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80018d0:	2300      	movs	r3, #0
 80018d2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018d4:	4b59      	ldr	r3, [pc, #356]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x180>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f003 030c 	and.w	r3, r3, #12
 80018dc:	2b08      	cmp	r3, #8
 80018de:	d00d      	beq.n	80018fc <HAL_RCC_GetSysClockFreq+0x40>
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	f200 80a1 	bhi.w	8001a28 <HAL_RCC_GetSysClockFreq+0x16c>
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d002      	beq.n	80018f0 <HAL_RCC_GetSysClockFreq+0x34>
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	d003      	beq.n	80018f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80018ee:	e09b      	b.n	8001a28 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018f0:	4b53      	ldr	r3, [pc, #332]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x184>)
 80018f2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80018f4:	e09b      	b.n	8001a2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018f6:	4b53      	ldr	r3, [pc, #332]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x188>)
 80018f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018fa:	e098      	b.n	8001a2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018fc:	4b4f      	ldr	r3, [pc, #316]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x180>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001904:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001906:	4b4d      	ldr	r3, [pc, #308]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d028      	beq.n	8001964 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001912:	4b4a      	ldr	r3, [pc, #296]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	099b      	lsrs	r3, r3, #6
 8001918:	2200      	movs	r2, #0
 800191a:	623b      	str	r3, [r7, #32]
 800191c:	627a      	str	r2, [r7, #36]	; 0x24
 800191e:	6a3b      	ldr	r3, [r7, #32]
 8001920:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001924:	2100      	movs	r1, #0
 8001926:	4b47      	ldr	r3, [pc, #284]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x188>)
 8001928:	fb03 f201 	mul.w	r2, r3, r1
 800192c:	2300      	movs	r3, #0
 800192e:	fb00 f303 	mul.w	r3, r0, r3
 8001932:	4413      	add	r3, r2
 8001934:	4a43      	ldr	r2, [pc, #268]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x188>)
 8001936:	fba0 1202 	umull	r1, r2, r0, r2
 800193a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800193c:	460a      	mov	r2, r1
 800193e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001940:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001942:	4413      	add	r3, r2
 8001944:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001948:	2200      	movs	r2, #0
 800194a:	61bb      	str	r3, [r7, #24]
 800194c:	61fa      	str	r2, [r7, #28]
 800194e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001952:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001956:	f7fe fc93 	bl	8000280 <__aeabi_uldivmod>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	4613      	mov	r3, r2
 8001960:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001962:	e053      	b.n	8001a0c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001964:	4b35      	ldr	r3, [pc, #212]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	099b      	lsrs	r3, r3, #6
 800196a:	2200      	movs	r2, #0
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	617a      	str	r2, [r7, #20]
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001976:	f04f 0b00 	mov.w	fp, #0
 800197a:	4652      	mov	r2, sl
 800197c:	465b      	mov	r3, fp
 800197e:	f04f 0000 	mov.w	r0, #0
 8001982:	f04f 0100 	mov.w	r1, #0
 8001986:	0159      	lsls	r1, r3, #5
 8001988:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800198c:	0150      	lsls	r0, r2, #5
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	ebb2 080a 	subs.w	r8, r2, sl
 8001996:	eb63 090b 	sbc.w	r9, r3, fp
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	f04f 0300 	mov.w	r3, #0
 80019a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80019a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80019aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80019ae:	ebb2 0408 	subs.w	r4, r2, r8
 80019b2:	eb63 0509 	sbc.w	r5, r3, r9
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	00eb      	lsls	r3, r5, #3
 80019c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019c4:	00e2      	lsls	r2, r4, #3
 80019c6:	4614      	mov	r4, r2
 80019c8:	461d      	mov	r5, r3
 80019ca:	eb14 030a 	adds.w	r3, r4, sl
 80019ce:	603b      	str	r3, [r7, #0]
 80019d0:	eb45 030b 	adc.w	r3, r5, fp
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	f04f 0300 	mov.w	r3, #0
 80019de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019e2:	4629      	mov	r1, r5
 80019e4:	028b      	lsls	r3, r1, #10
 80019e6:	4621      	mov	r1, r4
 80019e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019ec:	4621      	mov	r1, r4
 80019ee:	028a      	lsls	r2, r1, #10
 80019f0:	4610      	mov	r0, r2
 80019f2:	4619      	mov	r1, r3
 80019f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019f6:	2200      	movs	r2, #0
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	60fa      	str	r2, [r7, #12]
 80019fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a00:	f7fe fc3e 	bl	8000280 <__aeabi_uldivmod>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4613      	mov	r3, r2
 8001a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	0c1b      	lsrs	r3, r3, #16
 8001a12:	f003 0303 	and.w	r3, r3, #3
 8001a16:	3301      	adds	r3, #1
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001a1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a24:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a26:	e002      	b.n	8001a2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a2a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3740      	adds	r7, #64	; 0x40
 8001a34:	46bd      	mov	sp, r7
 8001a36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	00f42400 	.word	0x00f42400
 8001a44:	017d7840 	.word	0x017d7840

08001a48 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e097      	b.n	8001b8c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d106      	bne.n	8001a76 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7fe ff3d 	bl	80008f0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2202      	movs	r2, #2
 8001a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	6812      	ldr	r2, [r2, #0]
 8001a88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a8c:	f023 0307 	bic.w	r3, r3, #7
 8001a90:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	3304      	adds	r3, #4
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4610      	mov	r0, r2
 8001a9e:	f000 f907 	bl	8001cb0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001aca:	f023 0303 	bic.w	r3, r3, #3
 8001ace:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	021b      	lsls	r3, r3, #8
 8001ada:	4313      	orrs	r3, r2
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001ae8:	f023 030c 	bic.w	r3, r3, #12
 8001aec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001af4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001af8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	68da      	ldr	r2, [r3, #12]
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	021b      	lsls	r3, r3, #8
 8001b04:	4313      	orrs	r3, r2
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	011a      	lsls	r2, r3, #4
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	031b      	lsls	r3, r3, #12
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001b26:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8001b2e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	011b      	lsls	r3, r3, #4
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2201      	movs	r2, #1
 8001b76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3718      	adds	r7, #24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ba4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001bac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001bb4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001bbc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d110      	bne.n	8001be6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d102      	bne.n	8001bd0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8001bca:	7b7b      	ldrb	r3, [r7, #13]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d001      	beq.n	8001bd4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e069      	b.n	8001ca8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2202      	movs	r2, #2
 8001be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001be4:	e031      	b.n	8001c4a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	d110      	bne.n	8001c0e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001bec:	7bbb      	ldrb	r3, [r7, #14]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d102      	bne.n	8001bf8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001bf2:	7b3b      	ldrb	r3, [r7, #12]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d001      	beq.n	8001bfc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e055      	b.n	8001ca8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2202      	movs	r2, #2
 8001c00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2202      	movs	r2, #2
 8001c08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c0c:	e01d      	b.n	8001c4a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d108      	bne.n	8001c26 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001c14:	7bbb      	ldrb	r3, [r7, #14]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d105      	bne.n	8001c26 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001c1a:	7b7b      	ldrb	r3, [r7, #13]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d102      	bne.n	8001c26 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001c20:	7b3b      	ldrb	r3, [r7, #12]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d001      	beq.n	8001c2a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e03e      	b.n	8001ca8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2202      	movs	r2, #2
 8001c36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2202      	movs	r2, #2
 8001c46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d003      	beq.n	8001c58 <HAL_TIM_Encoder_Start+0xc4>
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d008      	beq.n	8001c68 <HAL_TIM_Encoder_Start+0xd4>
 8001c56:	e00f      	b.n	8001c78 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	2100      	movs	r1, #0
 8001c60:	4618      	mov	r0, r3
 8001c62:	f000 f8a5 	bl	8001db0 <TIM_CCxChannelCmd>
      break;
 8001c66:	e016      	b.n	8001c96 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	2104      	movs	r1, #4
 8001c70:	4618      	mov	r0, r3
 8001c72:	f000 f89d 	bl	8001db0 <TIM_CCxChannelCmd>
      break;
 8001c76:	e00e      	b.n	8001c96 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	2100      	movs	r1, #0
 8001c80:	4618      	mov	r0, r3
 8001c82:	f000 f895 	bl	8001db0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	2104      	movs	r1, #4
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f000 f88e 	bl	8001db0 <TIM_CCxChannelCmd>
      break;
 8001c94:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f042 0201 	orr.w	r2, r2, #1
 8001ca4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a34      	ldr	r2, [pc, #208]	; (8001d94 <TIM_Base_SetConfig+0xe4>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d00f      	beq.n	8001ce8 <TIM_Base_SetConfig+0x38>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cce:	d00b      	beq.n	8001ce8 <TIM_Base_SetConfig+0x38>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a31      	ldr	r2, [pc, #196]	; (8001d98 <TIM_Base_SetConfig+0xe8>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d007      	beq.n	8001ce8 <TIM_Base_SetConfig+0x38>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a30      	ldr	r2, [pc, #192]	; (8001d9c <TIM_Base_SetConfig+0xec>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d003      	beq.n	8001ce8 <TIM_Base_SetConfig+0x38>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a2f      	ldr	r2, [pc, #188]	; (8001da0 <TIM_Base_SetConfig+0xf0>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d108      	bne.n	8001cfa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a25      	ldr	r2, [pc, #148]	; (8001d94 <TIM_Base_SetConfig+0xe4>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d01b      	beq.n	8001d3a <TIM_Base_SetConfig+0x8a>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d08:	d017      	beq.n	8001d3a <TIM_Base_SetConfig+0x8a>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a22      	ldr	r2, [pc, #136]	; (8001d98 <TIM_Base_SetConfig+0xe8>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d013      	beq.n	8001d3a <TIM_Base_SetConfig+0x8a>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a21      	ldr	r2, [pc, #132]	; (8001d9c <TIM_Base_SetConfig+0xec>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d00f      	beq.n	8001d3a <TIM_Base_SetConfig+0x8a>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a20      	ldr	r2, [pc, #128]	; (8001da0 <TIM_Base_SetConfig+0xf0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d00b      	beq.n	8001d3a <TIM_Base_SetConfig+0x8a>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a1f      	ldr	r2, [pc, #124]	; (8001da4 <TIM_Base_SetConfig+0xf4>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d007      	beq.n	8001d3a <TIM_Base_SetConfig+0x8a>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a1e      	ldr	r2, [pc, #120]	; (8001da8 <TIM_Base_SetConfig+0xf8>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d003      	beq.n	8001d3a <TIM_Base_SetConfig+0x8a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a1d      	ldr	r2, [pc, #116]	; (8001dac <TIM_Base_SetConfig+0xfc>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d108      	bne.n	8001d4c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a08      	ldr	r2, [pc, #32]	; (8001d94 <TIM_Base_SetConfig+0xe4>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d103      	bne.n	8001d80 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	691a      	ldr	r2, [r3, #16]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	615a      	str	r2, [r3, #20]
}
 8001d86:	bf00      	nop
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40010000 	.word	0x40010000
 8001d98:	40000400 	.word	0x40000400
 8001d9c:	40000800 	.word	0x40000800
 8001da0:	40000c00 	.word	0x40000c00
 8001da4:	40014000 	.word	0x40014000
 8001da8:	40014400 	.word	0x40014400
 8001dac:	40014800 	.word	0x40014800

08001db0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b087      	sub	sp, #28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	f003 031f 	and.w	r3, r3, #31
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6a1a      	ldr	r2, [r3, #32]
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	401a      	ands	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6a1a      	ldr	r2, [r3, #32]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	f003 031f 	and.w	r3, r3, #31
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	fa01 f303 	lsl.w	r3, r1, r3
 8001de8:	431a      	orrs	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	621a      	str	r2, [r3, #32]
}
 8001dee:	bf00      	nop
 8001df0:	371c      	adds	r7, #28
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
	...

08001dfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d101      	bne.n	8001e14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001e10:	2302      	movs	r3, #2
 8001e12:	e050      	b.n	8001eb6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2202      	movs	r2, #2
 8001e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a1c      	ldr	r2, [pc, #112]	; (8001ec4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d018      	beq.n	8001e8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e60:	d013      	beq.n	8001e8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a18      	ldr	r2, [pc, #96]	; (8001ec8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d00e      	beq.n	8001e8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a16      	ldr	r2, [pc, #88]	; (8001ecc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d009      	beq.n	8001e8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a15      	ldr	r2, [pc, #84]	; (8001ed0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d004      	beq.n	8001e8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a13      	ldr	r2, [pc, #76]	; (8001ed4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d10c      	bne.n	8001ea4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68ba      	ldr	r2, [r7, #8]
 8001ea2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	40010000 	.word	0x40010000
 8001ec8:	40000400 	.word	0x40000400
 8001ecc:	40000800 	.word	0x40000800
 8001ed0:	40000c00 	.word	0x40000c00
 8001ed4:	40014000 	.word	0x40014000

08001ed8 <std>:
 8001ed8:	2300      	movs	r3, #0
 8001eda:	b510      	push	{r4, lr}
 8001edc:	4604      	mov	r4, r0
 8001ede:	e9c0 3300 	strd	r3, r3, [r0]
 8001ee2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001ee6:	6083      	str	r3, [r0, #8]
 8001ee8:	8181      	strh	r1, [r0, #12]
 8001eea:	6643      	str	r3, [r0, #100]	; 0x64
 8001eec:	81c2      	strh	r2, [r0, #14]
 8001eee:	6183      	str	r3, [r0, #24]
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	2208      	movs	r2, #8
 8001ef4:	305c      	adds	r0, #92	; 0x5c
 8001ef6:	f000 f906 	bl	8002106 <memset>
 8001efa:	4b0d      	ldr	r3, [pc, #52]	; (8001f30 <std+0x58>)
 8001efc:	6263      	str	r3, [r4, #36]	; 0x24
 8001efe:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <std+0x5c>)
 8001f00:	62a3      	str	r3, [r4, #40]	; 0x28
 8001f02:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <std+0x60>)
 8001f04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001f06:	4b0d      	ldr	r3, [pc, #52]	; (8001f3c <std+0x64>)
 8001f08:	6323      	str	r3, [r4, #48]	; 0x30
 8001f0a:	4b0d      	ldr	r3, [pc, #52]	; (8001f40 <std+0x68>)
 8001f0c:	6224      	str	r4, [r4, #32]
 8001f0e:	429c      	cmp	r4, r3
 8001f10:	d006      	beq.n	8001f20 <std+0x48>
 8001f12:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001f16:	4294      	cmp	r4, r2
 8001f18:	d002      	beq.n	8001f20 <std+0x48>
 8001f1a:	33d0      	adds	r3, #208	; 0xd0
 8001f1c:	429c      	cmp	r4, r3
 8001f1e:	d105      	bne.n	8001f2c <std+0x54>
 8001f20:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f28:	f000 b966 	b.w	80021f8 <__retarget_lock_init_recursive>
 8001f2c:	bd10      	pop	{r4, pc}
 8001f2e:	bf00      	nop
 8001f30:	08002081 	.word	0x08002081
 8001f34:	080020a3 	.word	0x080020a3
 8001f38:	080020db 	.word	0x080020db
 8001f3c:	080020ff 	.word	0x080020ff
 8001f40:	200000d4 	.word	0x200000d4

08001f44 <stdio_exit_handler>:
 8001f44:	4a02      	ldr	r2, [pc, #8]	; (8001f50 <stdio_exit_handler+0xc>)
 8001f46:	4903      	ldr	r1, [pc, #12]	; (8001f54 <stdio_exit_handler+0x10>)
 8001f48:	4803      	ldr	r0, [pc, #12]	; (8001f58 <stdio_exit_handler+0x14>)
 8001f4a:	f000 b869 	b.w	8002020 <_fwalk_sglue>
 8001f4e:	bf00      	nop
 8001f50:	2000000c 	.word	0x2000000c
 8001f54:	08002aa5 	.word	0x08002aa5
 8001f58:	20000018 	.word	0x20000018

08001f5c <cleanup_stdio>:
 8001f5c:	6841      	ldr	r1, [r0, #4]
 8001f5e:	4b0c      	ldr	r3, [pc, #48]	; (8001f90 <cleanup_stdio+0x34>)
 8001f60:	4299      	cmp	r1, r3
 8001f62:	b510      	push	{r4, lr}
 8001f64:	4604      	mov	r4, r0
 8001f66:	d001      	beq.n	8001f6c <cleanup_stdio+0x10>
 8001f68:	f000 fd9c 	bl	8002aa4 <_fflush_r>
 8001f6c:	68a1      	ldr	r1, [r4, #8]
 8001f6e:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <cleanup_stdio+0x38>)
 8001f70:	4299      	cmp	r1, r3
 8001f72:	d002      	beq.n	8001f7a <cleanup_stdio+0x1e>
 8001f74:	4620      	mov	r0, r4
 8001f76:	f000 fd95 	bl	8002aa4 <_fflush_r>
 8001f7a:	68e1      	ldr	r1, [r4, #12]
 8001f7c:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <cleanup_stdio+0x3c>)
 8001f7e:	4299      	cmp	r1, r3
 8001f80:	d004      	beq.n	8001f8c <cleanup_stdio+0x30>
 8001f82:	4620      	mov	r0, r4
 8001f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f88:	f000 bd8c 	b.w	8002aa4 <_fflush_r>
 8001f8c:	bd10      	pop	{r4, pc}
 8001f8e:	bf00      	nop
 8001f90:	200000d4 	.word	0x200000d4
 8001f94:	2000013c 	.word	0x2000013c
 8001f98:	200001a4 	.word	0x200001a4

08001f9c <global_stdio_init.part.0>:
 8001f9c:	b510      	push	{r4, lr}
 8001f9e:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <global_stdio_init.part.0+0x30>)
 8001fa0:	4c0b      	ldr	r4, [pc, #44]	; (8001fd0 <global_stdio_init.part.0+0x34>)
 8001fa2:	4a0c      	ldr	r2, [pc, #48]	; (8001fd4 <global_stdio_init.part.0+0x38>)
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	4620      	mov	r0, r4
 8001fa8:	2200      	movs	r2, #0
 8001faa:	2104      	movs	r1, #4
 8001fac:	f7ff ff94 	bl	8001ed8 <std>
 8001fb0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	2109      	movs	r1, #9
 8001fb8:	f7ff ff8e 	bl	8001ed8 <std>
 8001fbc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001fc6:	2112      	movs	r1, #18
 8001fc8:	f7ff bf86 	b.w	8001ed8 <std>
 8001fcc:	2000020c 	.word	0x2000020c
 8001fd0:	200000d4 	.word	0x200000d4
 8001fd4:	08001f45 	.word	0x08001f45

08001fd8 <__sfp_lock_acquire>:
 8001fd8:	4801      	ldr	r0, [pc, #4]	; (8001fe0 <__sfp_lock_acquire+0x8>)
 8001fda:	f000 b90e 	b.w	80021fa <__retarget_lock_acquire_recursive>
 8001fde:	bf00      	nop
 8001fe0:	20000215 	.word	0x20000215

08001fe4 <__sfp_lock_release>:
 8001fe4:	4801      	ldr	r0, [pc, #4]	; (8001fec <__sfp_lock_release+0x8>)
 8001fe6:	f000 b909 	b.w	80021fc <__retarget_lock_release_recursive>
 8001fea:	bf00      	nop
 8001fec:	20000215 	.word	0x20000215

08001ff0 <__sinit>:
 8001ff0:	b510      	push	{r4, lr}
 8001ff2:	4604      	mov	r4, r0
 8001ff4:	f7ff fff0 	bl	8001fd8 <__sfp_lock_acquire>
 8001ff8:	6a23      	ldr	r3, [r4, #32]
 8001ffa:	b11b      	cbz	r3, 8002004 <__sinit+0x14>
 8001ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002000:	f7ff bff0 	b.w	8001fe4 <__sfp_lock_release>
 8002004:	4b04      	ldr	r3, [pc, #16]	; (8002018 <__sinit+0x28>)
 8002006:	6223      	str	r3, [r4, #32]
 8002008:	4b04      	ldr	r3, [pc, #16]	; (800201c <__sinit+0x2c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1f5      	bne.n	8001ffc <__sinit+0xc>
 8002010:	f7ff ffc4 	bl	8001f9c <global_stdio_init.part.0>
 8002014:	e7f2      	b.n	8001ffc <__sinit+0xc>
 8002016:	bf00      	nop
 8002018:	08001f5d 	.word	0x08001f5d
 800201c:	2000020c 	.word	0x2000020c

08002020 <_fwalk_sglue>:
 8002020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002024:	4607      	mov	r7, r0
 8002026:	4688      	mov	r8, r1
 8002028:	4614      	mov	r4, r2
 800202a:	2600      	movs	r6, #0
 800202c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002030:	f1b9 0901 	subs.w	r9, r9, #1
 8002034:	d505      	bpl.n	8002042 <_fwalk_sglue+0x22>
 8002036:	6824      	ldr	r4, [r4, #0]
 8002038:	2c00      	cmp	r4, #0
 800203a:	d1f7      	bne.n	800202c <_fwalk_sglue+0xc>
 800203c:	4630      	mov	r0, r6
 800203e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002042:	89ab      	ldrh	r3, [r5, #12]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d907      	bls.n	8002058 <_fwalk_sglue+0x38>
 8002048:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800204c:	3301      	adds	r3, #1
 800204e:	d003      	beq.n	8002058 <_fwalk_sglue+0x38>
 8002050:	4629      	mov	r1, r5
 8002052:	4638      	mov	r0, r7
 8002054:	47c0      	blx	r8
 8002056:	4306      	orrs	r6, r0
 8002058:	3568      	adds	r5, #104	; 0x68
 800205a:	e7e9      	b.n	8002030 <_fwalk_sglue+0x10>

0800205c <iprintf>:
 800205c:	b40f      	push	{r0, r1, r2, r3}
 800205e:	b507      	push	{r0, r1, r2, lr}
 8002060:	4906      	ldr	r1, [pc, #24]	; (800207c <iprintf+0x20>)
 8002062:	ab04      	add	r3, sp, #16
 8002064:	6808      	ldr	r0, [r1, #0]
 8002066:	f853 2b04 	ldr.w	r2, [r3], #4
 800206a:	6881      	ldr	r1, [r0, #8]
 800206c:	9301      	str	r3, [sp, #4]
 800206e:	f000 f9e9 	bl	8002444 <_vfiprintf_r>
 8002072:	b003      	add	sp, #12
 8002074:	f85d eb04 	ldr.w	lr, [sp], #4
 8002078:	b004      	add	sp, #16
 800207a:	4770      	bx	lr
 800207c:	20000064 	.word	0x20000064

08002080 <__sread>:
 8002080:	b510      	push	{r4, lr}
 8002082:	460c      	mov	r4, r1
 8002084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002088:	f000 f868 	bl	800215c <_read_r>
 800208c:	2800      	cmp	r0, #0
 800208e:	bfab      	itete	ge
 8002090:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002092:	89a3      	ldrhlt	r3, [r4, #12]
 8002094:	181b      	addge	r3, r3, r0
 8002096:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800209a:	bfac      	ite	ge
 800209c:	6563      	strge	r3, [r4, #84]	; 0x54
 800209e:	81a3      	strhlt	r3, [r4, #12]
 80020a0:	bd10      	pop	{r4, pc}

080020a2 <__swrite>:
 80020a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020a6:	461f      	mov	r7, r3
 80020a8:	898b      	ldrh	r3, [r1, #12]
 80020aa:	05db      	lsls	r3, r3, #23
 80020ac:	4605      	mov	r5, r0
 80020ae:	460c      	mov	r4, r1
 80020b0:	4616      	mov	r6, r2
 80020b2:	d505      	bpl.n	80020c0 <__swrite+0x1e>
 80020b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020b8:	2302      	movs	r3, #2
 80020ba:	2200      	movs	r2, #0
 80020bc:	f000 f83c 	bl	8002138 <_lseek_r>
 80020c0:	89a3      	ldrh	r3, [r4, #12]
 80020c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80020c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020ca:	81a3      	strh	r3, [r4, #12]
 80020cc:	4632      	mov	r2, r6
 80020ce:	463b      	mov	r3, r7
 80020d0:	4628      	mov	r0, r5
 80020d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80020d6:	f000 b853 	b.w	8002180 <_write_r>

080020da <__sseek>:
 80020da:	b510      	push	{r4, lr}
 80020dc:	460c      	mov	r4, r1
 80020de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020e2:	f000 f829 	bl	8002138 <_lseek_r>
 80020e6:	1c43      	adds	r3, r0, #1
 80020e8:	89a3      	ldrh	r3, [r4, #12]
 80020ea:	bf15      	itete	ne
 80020ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80020ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80020f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80020f6:	81a3      	strheq	r3, [r4, #12]
 80020f8:	bf18      	it	ne
 80020fa:	81a3      	strhne	r3, [r4, #12]
 80020fc:	bd10      	pop	{r4, pc}

080020fe <__sclose>:
 80020fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002102:	f000 b809 	b.w	8002118 <_close_r>

08002106 <memset>:
 8002106:	4402      	add	r2, r0
 8002108:	4603      	mov	r3, r0
 800210a:	4293      	cmp	r3, r2
 800210c:	d100      	bne.n	8002110 <memset+0xa>
 800210e:	4770      	bx	lr
 8002110:	f803 1b01 	strb.w	r1, [r3], #1
 8002114:	e7f9      	b.n	800210a <memset+0x4>
	...

08002118 <_close_r>:
 8002118:	b538      	push	{r3, r4, r5, lr}
 800211a:	4d06      	ldr	r5, [pc, #24]	; (8002134 <_close_r+0x1c>)
 800211c:	2300      	movs	r3, #0
 800211e:	4604      	mov	r4, r0
 8002120:	4608      	mov	r0, r1
 8002122:	602b      	str	r3, [r5, #0]
 8002124:	f7fe fc94 	bl	8000a50 <_close>
 8002128:	1c43      	adds	r3, r0, #1
 800212a:	d102      	bne.n	8002132 <_close_r+0x1a>
 800212c:	682b      	ldr	r3, [r5, #0]
 800212e:	b103      	cbz	r3, 8002132 <_close_r+0x1a>
 8002130:	6023      	str	r3, [r4, #0]
 8002132:	bd38      	pop	{r3, r4, r5, pc}
 8002134:	20000210 	.word	0x20000210

08002138 <_lseek_r>:
 8002138:	b538      	push	{r3, r4, r5, lr}
 800213a:	4d07      	ldr	r5, [pc, #28]	; (8002158 <_lseek_r+0x20>)
 800213c:	4604      	mov	r4, r0
 800213e:	4608      	mov	r0, r1
 8002140:	4611      	mov	r1, r2
 8002142:	2200      	movs	r2, #0
 8002144:	602a      	str	r2, [r5, #0]
 8002146:	461a      	mov	r2, r3
 8002148:	f7fe fca9 	bl	8000a9e <_lseek>
 800214c:	1c43      	adds	r3, r0, #1
 800214e:	d102      	bne.n	8002156 <_lseek_r+0x1e>
 8002150:	682b      	ldr	r3, [r5, #0]
 8002152:	b103      	cbz	r3, 8002156 <_lseek_r+0x1e>
 8002154:	6023      	str	r3, [r4, #0]
 8002156:	bd38      	pop	{r3, r4, r5, pc}
 8002158:	20000210 	.word	0x20000210

0800215c <_read_r>:
 800215c:	b538      	push	{r3, r4, r5, lr}
 800215e:	4d07      	ldr	r5, [pc, #28]	; (800217c <_read_r+0x20>)
 8002160:	4604      	mov	r4, r0
 8002162:	4608      	mov	r0, r1
 8002164:	4611      	mov	r1, r2
 8002166:	2200      	movs	r2, #0
 8002168:	602a      	str	r2, [r5, #0]
 800216a:	461a      	mov	r2, r3
 800216c:	f7fe fc37 	bl	80009de <_read>
 8002170:	1c43      	adds	r3, r0, #1
 8002172:	d102      	bne.n	800217a <_read_r+0x1e>
 8002174:	682b      	ldr	r3, [r5, #0]
 8002176:	b103      	cbz	r3, 800217a <_read_r+0x1e>
 8002178:	6023      	str	r3, [r4, #0]
 800217a:	bd38      	pop	{r3, r4, r5, pc}
 800217c:	20000210 	.word	0x20000210

08002180 <_write_r>:
 8002180:	b538      	push	{r3, r4, r5, lr}
 8002182:	4d07      	ldr	r5, [pc, #28]	; (80021a0 <_write_r+0x20>)
 8002184:	4604      	mov	r4, r0
 8002186:	4608      	mov	r0, r1
 8002188:	4611      	mov	r1, r2
 800218a:	2200      	movs	r2, #0
 800218c:	602a      	str	r2, [r5, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	f7fe fc42 	bl	8000a18 <_write>
 8002194:	1c43      	adds	r3, r0, #1
 8002196:	d102      	bne.n	800219e <_write_r+0x1e>
 8002198:	682b      	ldr	r3, [r5, #0]
 800219a:	b103      	cbz	r3, 800219e <_write_r+0x1e>
 800219c:	6023      	str	r3, [r4, #0]
 800219e:	bd38      	pop	{r3, r4, r5, pc}
 80021a0:	20000210 	.word	0x20000210

080021a4 <__errno>:
 80021a4:	4b01      	ldr	r3, [pc, #4]	; (80021ac <__errno+0x8>)
 80021a6:	6818      	ldr	r0, [r3, #0]
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	20000064 	.word	0x20000064

080021b0 <__libc_init_array>:
 80021b0:	b570      	push	{r4, r5, r6, lr}
 80021b2:	4d0d      	ldr	r5, [pc, #52]	; (80021e8 <__libc_init_array+0x38>)
 80021b4:	4c0d      	ldr	r4, [pc, #52]	; (80021ec <__libc_init_array+0x3c>)
 80021b6:	1b64      	subs	r4, r4, r5
 80021b8:	10a4      	asrs	r4, r4, #2
 80021ba:	2600      	movs	r6, #0
 80021bc:	42a6      	cmp	r6, r4
 80021be:	d109      	bne.n	80021d4 <__libc_init_array+0x24>
 80021c0:	4d0b      	ldr	r5, [pc, #44]	; (80021f0 <__libc_init_array+0x40>)
 80021c2:	4c0c      	ldr	r4, [pc, #48]	; (80021f4 <__libc_init_array+0x44>)
 80021c4:	f000 fdc0 	bl	8002d48 <_init>
 80021c8:	1b64      	subs	r4, r4, r5
 80021ca:	10a4      	asrs	r4, r4, #2
 80021cc:	2600      	movs	r6, #0
 80021ce:	42a6      	cmp	r6, r4
 80021d0:	d105      	bne.n	80021de <__libc_init_array+0x2e>
 80021d2:	bd70      	pop	{r4, r5, r6, pc}
 80021d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80021d8:	4798      	blx	r3
 80021da:	3601      	adds	r6, #1
 80021dc:	e7ee      	b.n	80021bc <__libc_init_array+0xc>
 80021de:	f855 3b04 	ldr.w	r3, [r5], #4
 80021e2:	4798      	blx	r3
 80021e4:	3601      	adds	r6, #1
 80021e6:	e7f2      	b.n	80021ce <__libc_init_array+0x1e>
 80021e8:	08002dc0 	.word	0x08002dc0
 80021ec:	08002dc0 	.word	0x08002dc0
 80021f0:	08002dc0 	.word	0x08002dc0
 80021f4:	08002dc4 	.word	0x08002dc4

080021f8 <__retarget_lock_init_recursive>:
 80021f8:	4770      	bx	lr

080021fa <__retarget_lock_acquire_recursive>:
 80021fa:	4770      	bx	lr

080021fc <__retarget_lock_release_recursive>:
 80021fc:	4770      	bx	lr
	...

08002200 <_free_r>:
 8002200:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002202:	2900      	cmp	r1, #0
 8002204:	d044      	beq.n	8002290 <_free_r+0x90>
 8002206:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800220a:	9001      	str	r0, [sp, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	f1a1 0404 	sub.w	r4, r1, #4
 8002212:	bfb8      	it	lt
 8002214:	18e4      	addlt	r4, r4, r3
 8002216:	f000 f8df 	bl	80023d8 <__malloc_lock>
 800221a:	4a1e      	ldr	r2, [pc, #120]	; (8002294 <_free_r+0x94>)
 800221c:	9801      	ldr	r0, [sp, #4]
 800221e:	6813      	ldr	r3, [r2, #0]
 8002220:	b933      	cbnz	r3, 8002230 <_free_r+0x30>
 8002222:	6063      	str	r3, [r4, #4]
 8002224:	6014      	str	r4, [r2, #0]
 8002226:	b003      	add	sp, #12
 8002228:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800222c:	f000 b8da 	b.w	80023e4 <__malloc_unlock>
 8002230:	42a3      	cmp	r3, r4
 8002232:	d908      	bls.n	8002246 <_free_r+0x46>
 8002234:	6825      	ldr	r5, [r4, #0]
 8002236:	1961      	adds	r1, r4, r5
 8002238:	428b      	cmp	r3, r1
 800223a:	bf01      	itttt	eq
 800223c:	6819      	ldreq	r1, [r3, #0]
 800223e:	685b      	ldreq	r3, [r3, #4]
 8002240:	1949      	addeq	r1, r1, r5
 8002242:	6021      	streq	r1, [r4, #0]
 8002244:	e7ed      	b.n	8002222 <_free_r+0x22>
 8002246:	461a      	mov	r2, r3
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	b10b      	cbz	r3, 8002250 <_free_r+0x50>
 800224c:	42a3      	cmp	r3, r4
 800224e:	d9fa      	bls.n	8002246 <_free_r+0x46>
 8002250:	6811      	ldr	r1, [r2, #0]
 8002252:	1855      	adds	r5, r2, r1
 8002254:	42a5      	cmp	r5, r4
 8002256:	d10b      	bne.n	8002270 <_free_r+0x70>
 8002258:	6824      	ldr	r4, [r4, #0]
 800225a:	4421      	add	r1, r4
 800225c:	1854      	adds	r4, r2, r1
 800225e:	42a3      	cmp	r3, r4
 8002260:	6011      	str	r1, [r2, #0]
 8002262:	d1e0      	bne.n	8002226 <_free_r+0x26>
 8002264:	681c      	ldr	r4, [r3, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	6053      	str	r3, [r2, #4]
 800226a:	440c      	add	r4, r1
 800226c:	6014      	str	r4, [r2, #0]
 800226e:	e7da      	b.n	8002226 <_free_r+0x26>
 8002270:	d902      	bls.n	8002278 <_free_r+0x78>
 8002272:	230c      	movs	r3, #12
 8002274:	6003      	str	r3, [r0, #0]
 8002276:	e7d6      	b.n	8002226 <_free_r+0x26>
 8002278:	6825      	ldr	r5, [r4, #0]
 800227a:	1961      	adds	r1, r4, r5
 800227c:	428b      	cmp	r3, r1
 800227e:	bf04      	itt	eq
 8002280:	6819      	ldreq	r1, [r3, #0]
 8002282:	685b      	ldreq	r3, [r3, #4]
 8002284:	6063      	str	r3, [r4, #4]
 8002286:	bf04      	itt	eq
 8002288:	1949      	addeq	r1, r1, r5
 800228a:	6021      	streq	r1, [r4, #0]
 800228c:	6054      	str	r4, [r2, #4]
 800228e:	e7ca      	b.n	8002226 <_free_r+0x26>
 8002290:	b003      	add	sp, #12
 8002292:	bd30      	pop	{r4, r5, pc}
 8002294:	20000218 	.word	0x20000218

08002298 <sbrk_aligned>:
 8002298:	b570      	push	{r4, r5, r6, lr}
 800229a:	4e0e      	ldr	r6, [pc, #56]	; (80022d4 <sbrk_aligned+0x3c>)
 800229c:	460c      	mov	r4, r1
 800229e:	6831      	ldr	r1, [r6, #0]
 80022a0:	4605      	mov	r5, r0
 80022a2:	b911      	cbnz	r1, 80022aa <sbrk_aligned+0x12>
 80022a4:	f000 fcbc 	bl	8002c20 <_sbrk_r>
 80022a8:	6030      	str	r0, [r6, #0]
 80022aa:	4621      	mov	r1, r4
 80022ac:	4628      	mov	r0, r5
 80022ae:	f000 fcb7 	bl	8002c20 <_sbrk_r>
 80022b2:	1c43      	adds	r3, r0, #1
 80022b4:	d00a      	beq.n	80022cc <sbrk_aligned+0x34>
 80022b6:	1cc4      	adds	r4, r0, #3
 80022b8:	f024 0403 	bic.w	r4, r4, #3
 80022bc:	42a0      	cmp	r0, r4
 80022be:	d007      	beq.n	80022d0 <sbrk_aligned+0x38>
 80022c0:	1a21      	subs	r1, r4, r0
 80022c2:	4628      	mov	r0, r5
 80022c4:	f000 fcac 	bl	8002c20 <_sbrk_r>
 80022c8:	3001      	adds	r0, #1
 80022ca:	d101      	bne.n	80022d0 <sbrk_aligned+0x38>
 80022cc:	f04f 34ff 	mov.w	r4, #4294967295
 80022d0:	4620      	mov	r0, r4
 80022d2:	bd70      	pop	{r4, r5, r6, pc}
 80022d4:	2000021c 	.word	0x2000021c

080022d8 <_malloc_r>:
 80022d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80022dc:	1ccd      	adds	r5, r1, #3
 80022de:	f025 0503 	bic.w	r5, r5, #3
 80022e2:	3508      	adds	r5, #8
 80022e4:	2d0c      	cmp	r5, #12
 80022e6:	bf38      	it	cc
 80022e8:	250c      	movcc	r5, #12
 80022ea:	2d00      	cmp	r5, #0
 80022ec:	4607      	mov	r7, r0
 80022ee:	db01      	blt.n	80022f4 <_malloc_r+0x1c>
 80022f0:	42a9      	cmp	r1, r5
 80022f2:	d905      	bls.n	8002300 <_malloc_r+0x28>
 80022f4:	230c      	movs	r3, #12
 80022f6:	603b      	str	r3, [r7, #0]
 80022f8:	2600      	movs	r6, #0
 80022fa:	4630      	mov	r0, r6
 80022fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002300:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80023d4 <_malloc_r+0xfc>
 8002304:	f000 f868 	bl	80023d8 <__malloc_lock>
 8002308:	f8d8 3000 	ldr.w	r3, [r8]
 800230c:	461c      	mov	r4, r3
 800230e:	bb5c      	cbnz	r4, 8002368 <_malloc_r+0x90>
 8002310:	4629      	mov	r1, r5
 8002312:	4638      	mov	r0, r7
 8002314:	f7ff ffc0 	bl	8002298 <sbrk_aligned>
 8002318:	1c43      	adds	r3, r0, #1
 800231a:	4604      	mov	r4, r0
 800231c:	d155      	bne.n	80023ca <_malloc_r+0xf2>
 800231e:	f8d8 4000 	ldr.w	r4, [r8]
 8002322:	4626      	mov	r6, r4
 8002324:	2e00      	cmp	r6, #0
 8002326:	d145      	bne.n	80023b4 <_malloc_r+0xdc>
 8002328:	2c00      	cmp	r4, #0
 800232a:	d048      	beq.n	80023be <_malloc_r+0xe6>
 800232c:	6823      	ldr	r3, [r4, #0]
 800232e:	4631      	mov	r1, r6
 8002330:	4638      	mov	r0, r7
 8002332:	eb04 0903 	add.w	r9, r4, r3
 8002336:	f000 fc73 	bl	8002c20 <_sbrk_r>
 800233a:	4581      	cmp	r9, r0
 800233c:	d13f      	bne.n	80023be <_malloc_r+0xe6>
 800233e:	6821      	ldr	r1, [r4, #0]
 8002340:	1a6d      	subs	r5, r5, r1
 8002342:	4629      	mov	r1, r5
 8002344:	4638      	mov	r0, r7
 8002346:	f7ff ffa7 	bl	8002298 <sbrk_aligned>
 800234a:	3001      	adds	r0, #1
 800234c:	d037      	beq.n	80023be <_malloc_r+0xe6>
 800234e:	6823      	ldr	r3, [r4, #0]
 8002350:	442b      	add	r3, r5
 8002352:	6023      	str	r3, [r4, #0]
 8002354:	f8d8 3000 	ldr.w	r3, [r8]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d038      	beq.n	80023ce <_malloc_r+0xf6>
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	42a2      	cmp	r2, r4
 8002360:	d12b      	bne.n	80023ba <_malloc_r+0xe2>
 8002362:	2200      	movs	r2, #0
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	e00f      	b.n	8002388 <_malloc_r+0xb0>
 8002368:	6822      	ldr	r2, [r4, #0]
 800236a:	1b52      	subs	r2, r2, r5
 800236c:	d41f      	bmi.n	80023ae <_malloc_r+0xd6>
 800236e:	2a0b      	cmp	r2, #11
 8002370:	d917      	bls.n	80023a2 <_malloc_r+0xca>
 8002372:	1961      	adds	r1, r4, r5
 8002374:	42a3      	cmp	r3, r4
 8002376:	6025      	str	r5, [r4, #0]
 8002378:	bf18      	it	ne
 800237a:	6059      	strne	r1, [r3, #4]
 800237c:	6863      	ldr	r3, [r4, #4]
 800237e:	bf08      	it	eq
 8002380:	f8c8 1000 	streq.w	r1, [r8]
 8002384:	5162      	str	r2, [r4, r5]
 8002386:	604b      	str	r3, [r1, #4]
 8002388:	4638      	mov	r0, r7
 800238a:	f104 060b 	add.w	r6, r4, #11
 800238e:	f000 f829 	bl	80023e4 <__malloc_unlock>
 8002392:	f026 0607 	bic.w	r6, r6, #7
 8002396:	1d23      	adds	r3, r4, #4
 8002398:	1af2      	subs	r2, r6, r3
 800239a:	d0ae      	beq.n	80022fa <_malloc_r+0x22>
 800239c:	1b9b      	subs	r3, r3, r6
 800239e:	50a3      	str	r3, [r4, r2]
 80023a0:	e7ab      	b.n	80022fa <_malloc_r+0x22>
 80023a2:	42a3      	cmp	r3, r4
 80023a4:	6862      	ldr	r2, [r4, #4]
 80023a6:	d1dd      	bne.n	8002364 <_malloc_r+0x8c>
 80023a8:	f8c8 2000 	str.w	r2, [r8]
 80023ac:	e7ec      	b.n	8002388 <_malloc_r+0xb0>
 80023ae:	4623      	mov	r3, r4
 80023b0:	6864      	ldr	r4, [r4, #4]
 80023b2:	e7ac      	b.n	800230e <_malloc_r+0x36>
 80023b4:	4634      	mov	r4, r6
 80023b6:	6876      	ldr	r6, [r6, #4]
 80023b8:	e7b4      	b.n	8002324 <_malloc_r+0x4c>
 80023ba:	4613      	mov	r3, r2
 80023bc:	e7cc      	b.n	8002358 <_malloc_r+0x80>
 80023be:	230c      	movs	r3, #12
 80023c0:	603b      	str	r3, [r7, #0]
 80023c2:	4638      	mov	r0, r7
 80023c4:	f000 f80e 	bl	80023e4 <__malloc_unlock>
 80023c8:	e797      	b.n	80022fa <_malloc_r+0x22>
 80023ca:	6025      	str	r5, [r4, #0]
 80023cc:	e7dc      	b.n	8002388 <_malloc_r+0xb0>
 80023ce:	605b      	str	r3, [r3, #4]
 80023d0:	deff      	udf	#255	; 0xff
 80023d2:	bf00      	nop
 80023d4:	20000218 	.word	0x20000218

080023d8 <__malloc_lock>:
 80023d8:	4801      	ldr	r0, [pc, #4]	; (80023e0 <__malloc_lock+0x8>)
 80023da:	f7ff bf0e 	b.w	80021fa <__retarget_lock_acquire_recursive>
 80023de:	bf00      	nop
 80023e0:	20000214 	.word	0x20000214

080023e4 <__malloc_unlock>:
 80023e4:	4801      	ldr	r0, [pc, #4]	; (80023ec <__malloc_unlock+0x8>)
 80023e6:	f7ff bf09 	b.w	80021fc <__retarget_lock_release_recursive>
 80023ea:	bf00      	nop
 80023ec:	20000214 	.word	0x20000214

080023f0 <__sfputc_r>:
 80023f0:	6893      	ldr	r3, [r2, #8]
 80023f2:	3b01      	subs	r3, #1
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	b410      	push	{r4}
 80023f8:	6093      	str	r3, [r2, #8]
 80023fa:	da08      	bge.n	800240e <__sfputc_r+0x1e>
 80023fc:	6994      	ldr	r4, [r2, #24]
 80023fe:	42a3      	cmp	r3, r4
 8002400:	db01      	blt.n	8002406 <__sfputc_r+0x16>
 8002402:	290a      	cmp	r1, #10
 8002404:	d103      	bne.n	800240e <__sfputc_r+0x1e>
 8002406:	f85d 4b04 	ldr.w	r4, [sp], #4
 800240a:	f000 bb73 	b.w	8002af4 <__swbuf_r>
 800240e:	6813      	ldr	r3, [r2, #0]
 8002410:	1c58      	adds	r0, r3, #1
 8002412:	6010      	str	r0, [r2, #0]
 8002414:	7019      	strb	r1, [r3, #0]
 8002416:	4608      	mov	r0, r1
 8002418:	f85d 4b04 	ldr.w	r4, [sp], #4
 800241c:	4770      	bx	lr

0800241e <__sfputs_r>:
 800241e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002420:	4606      	mov	r6, r0
 8002422:	460f      	mov	r7, r1
 8002424:	4614      	mov	r4, r2
 8002426:	18d5      	adds	r5, r2, r3
 8002428:	42ac      	cmp	r4, r5
 800242a:	d101      	bne.n	8002430 <__sfputs_r+0x12>
 800242c:	2000      	movs	r0, #0
 800242e:	e007      	b.n	8002440 <__sfputs_r+0x22>
 8002430:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002434:	463a      	mov	r2, r7
 8002436:	4630      	mov	r0, r6
 8002438:	f7ff ffda 	bl	80023f0 <__sfputc_r>
 800243c:	1c43      	adds	r3, r0, #1
 800243e:	d1f3      	bne.n	8002428 <__sfputs_r+0xa>
 8002440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002444 <_vfiprintf_r>:
 8002444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002448:	460d      	mov	r5, r1
 800244a:	b09d      	sub	sp, #116	; 0x74
 800244c:	4614      	mov	r4, r2
 800244e:	4698      	mov	r8, r3
 8002450:	4606      	mov	r6, r0
 8002452:	b118      	cbz	r0, 800245c <_vfiprintf_r+0x18>
 8002454:	6a03      	ldr	r3, [r0, #32]
 8002456:	b90b      	cbnz	r3, 800245c <_vfiprintf_r+0x18>
 8002458:	f7ff fdca 	bl	8001ff0 <__sinit>
 800245c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800245e:	07d9      	lsls	r1, r3, #31
 8002460:	d405      	bmi.n	800246e <_vfiprintf_r+0x2a>
 8002462:	89ab      	ldrh	r3, [r5, #12]
 8002464:	059a      	lsls	r2, r3, #22
 8002466:	d402      	bmi.n	800246e <_vfiprintf_r+0x2a>
 8002468:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800246a:	f7ff fec6 	bl	80021fa <__retarget_lock_acquire_recursive>
 800246e:	89ab      	ldrh	r3, [r5, #12]
 8002470:	071b      	lsls	r3, r3, #28
 8002472:	d501      	bpl.n	8002478 <_vfiprintf_r+0x34>
 8002474:	692b      	ldr	r3, [r5, #16]
 8002476:	b99b      	cbnz	r3, 80024a0 <_vfiprintf_r+0x5c>
 8002478:	4629      	mov	r1, r5
 800247a:	4630      	mov	r0, r6
 800247c:	f000 fb78 	bl	8002b70 <__swsetup_r>
 8002480:	b170      	cbz	r0, 80024a0 <_vfiprintf_r+0x5c>
 8002482:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002484:	07dc      	lsls	r4, r3, #31
 8002486:	d504      	bpl.n	8002492 <_vfiprintf_r+0x4e>
 8002488:	f04f 30ff 	mov.w	r0, #4294967295
 800248c:	b01d      	add	sp, #116	; 0x74
 800248e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002492:	89ab      	ldrh	r3, [r5, #12]
 8002494:	0598      	lsls	r0, r3, #22
 8002496:	d4f7      	bmi.n	8002488 <_vfiprintf_r+0x44>
 8002498:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800249a:	f7ff feaf 	bl	80021fc <__retarget_lock_release_recursive>
 800249e:	e7f3      	b.n	8002488 <_vfiprintf_r+0x44>
 80024a0:	2300      	movs	r3, #0
 80024a2:	9309      	str	r3, [sp, #36]	; 0x24
 80024a4:	2320      	movs	r3, #32
 80024a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80024aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80024ae:	2330      	movs	r3, #48	; 0x30
 80024b0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8002664 <_vfiprintf_r+0x220>
 80024b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80024b8:	f04f 0901 	mov.w	r9, #1
 80024bc:	4623      	mov	r3, r4
 80024be:	469a      	mov	sl, r3
 80024c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80024c4:	b10a      	cbz	r2, 80024ca <_vfiprintf_r+0x86>
 80024c6:	2a25      	cmp	r2, #37	; 0x25
 80024c8:	d1f9      	bne.n	80024be <_vfiprintf_r+0x7a>
 80024ca:	ebba 0b04 	subs.w	fp, sl, r4
 80024ce:	d00b      	beq.n	80024e8 <_vfiprintf_r+0xa4>
 80024d0:	465b      	mov	r3, fp
 80024d2:	4622      	mov	r2, r4
 80024d4:	4629      	mov	r1, r5
 80024d6:	4630      	mov	r0, r6
 80024d8:	f7ff ffa1 	bl	800241e <__sfputs_r>
 80024dc:	3001      	adds	r0, #1
 80024de:	f000 80a9 	beq.w	8002634 <_vfiprintf_r+0x1f0>
 80024e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80024e4:	445a      	add	r2, fp
 80024e6:	9209      	str	r2, [sp, #36]	; 0x24
 80024e8:	f89a 3000 	ldrb.w	r3, [sl]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 80a1 	beq.w	8002634 <_vfiprintf_r+0x1f0>
 80024f2:	2300      	movs	r3, #0
 80024f4:	f04f 32ff 	mov.w	r2, #4294967295
 80024f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80024fc:	f10a 0a01 	add.w	sl, sl, #1
 8002500:	9304      	str	r3, [sp, #16]
 8002502:	9307      	str	r3, [sp, #28]
 8002504:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002508:	931a      	str	r3, [sp, #104]	; 0x68
 800250a:	4654      	mov	r4, sl
 800250c:	2205      	movs	r2, #5
 800250e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002512:	4854      	ldr	r0, [pc, #336]	; (8002664 <_vfiprintf_r+0x220>)
 8002514:	f7fd fe64 	bl	80001e0 <memchr>
 8002518:	9a04      	ldr	r2, [sp, #16]
 800251a:	b9d8      	cbnz	r0, 8002554 <_vfiprintf_r+0x110>
 800251c:	06d1      	lsls	r1, r2, #27
 800251e:	bf44      	itt	mi
 8002520:	2320      	movmi	r3, #32
 8002522:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002526:	0713      	lsls	r3, r2, #28
 8002528:	bf44      	itt	mi
 800252a:	232b      	movmi	r3, #43	; 0x2b
 800252c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002530:	f89a 3000 	ldrb.w	r3, [sl]
 8002534:	2b2a      	cmp	r3, #42	; 0x2a
 8002536:	d015      	beq.n	8002564 <_vfiprintf_r+0x120>
 8002538:	9a07      	ldr	r2, [sp, #28]
 800253a:	4654      	mov	r4, sl
 800253c:	2000      	movs	r0, #0
 800253e:	f04f 0c0a 	mov.w	ip, #10
 8002542:	4621      	mov	r1, r4
 8002544:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002548:	3b30      	subs	r3, #48	; 0x30
 800254a:	2b09      	cmp	r3, #9
 800254c:	d94d      	bls.n	80025ea <_vfiprintf_r+0x1a6>
 800254e:	b1b0      	cbz	r0, 800257e <_vfiprintf_r+0x13a>
 8002550:	9207      	str	r2, [sp, #28]
 8002552:	e014      	b.n	800257e <_vfiprintf_r+0x13a>
 8002554:	eba0 0308 	sub.w	r3, r0, r8
 8002558:	fa09 f303 	lsl.w	r3, r9, r3
 800255c:	4313      	orrs	r3, r2
 800255e:	9304      	str	r3, [sp, #16]
 8002560:	46a2      	mov	sl, r4
 8002562:	e7d2      	b.n	800250a <_vfiprintf_r+0xc6>
 8002564:	9b03      	ldr	r3, [sp, #12]
 8002566:	1d19      	adds	r1, r3, #4
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	9103      	str	r1, [sp, #12]
 800256c:	2b00      	cmp	r3, #0
 800256e:	bfbb      	ittet	lt
 8002570:	425b      	neglt	r3, r3
 8002572:	f042 0202 	orrlt.w	r2, r2, #2
 8002576:	9307      	strge	r3, [sp, #28]
 8002578:	9307      	strlt	r3, [sp, #28]
 800257a:	bfb8      	it	lt
 800257c:	9204      	strlt	r2, [sp, #16]
 800257e:	7823      	ldrb	r3, [r4, #0]
 8002580:	2b2e      	cmp	r3, #46	; 0x2e
 8002582:	d10c      	bne.n	800259e <_vfiprintf_r+0x15a>
 8002584:	7863      	ldrb	r3, [r4, #1]
 8002586:	2b2a      	cmp	r3, #42	; 0x2a
 8002588:	d134      	bne.n	80025f4 <_vfiprintf_r+0x1b0>
 800258a:	9b03      	ldr	r3, [sp, #12]
 800258c:	1d1a      	adds	r2, r3, #4
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	9203      	str	r2, [sp, #12]
 8002592:	2b00      	cmp	r3, #0
 8002594:	bfb8      	it	lt
 8002596:	f04f 33ff 	movlt.w	r3, #4294967295
 800259a:	3402      	adds	r4, #2
 800259c:	9305      	str	r3, [sp, #20]
 800259e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8002674 <_vfiprintf_r+0x230>
 80025a2:	7821      	ldrb	r1, [r4, #0]
 80025a4:	2203      	movs	r2, #3
 80025a6:	4650      	mov	r0, sl
 80025a8:	f7fd fe1a 	bl	80001e0 <memchr>
 80025ac:	b138      	cbz	r0, 80025be <_vfiprintf_r+0x17a>
 80025ae:	9b04      	ldr	r3, [sp, #16]
 80025b0:	eba0 000a 	sub.w	r0, r0, sl
 80025b4:	2240      	movs	r2, #64	; 0x40
 80025b6:	4082      	lsls	r2, r0
 80025b8:	4313      	orrs	r3, r2
 80025ba:	3401      	adds	r4, #1
 80025bc:	9304      	str	r3, [sp, #16]
 80025be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025c2:	4829      	ldr	r0, [pc, #164]	; (8002668 <_vfiprintf_r+0x224>)
 80025c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80025c8:	2206      	movs	r2, #6
 80025ca:	f7fd fe09 	bl	80001e0 <memchr>
 80025ce:	2800      	cmp	r0, #0
 80025d0:	d03f      	beq.n	8002652 <_vfiprintf_r+0x20e>
 80025d2:	4b26      	ldr	r3, [pc, #152]	; (800266c <_vfiprintf_r+0x228>)
 80025d4:	bb1b      	cbnz	r3, 800261e <_vfiprintf_r+0x1da>
 80025d6:	9b03      	ldr	r3, [sp, #12]
 80025d8:	3307      	adds	r3, #7
 80025da:	f023 0307 	bic.w	r3, r3, #7
 80025de:	3308      	adds	r3, #8
 80025e0:	9303      	str	r3, [sp, #12]
 80025e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025e4:	443b      	add	r3, r7
 80025e6:	9309      	str	r3, [sp, #36]	; 0x24
 80025e8:	e768      	b.n	80024bc <_vfiprintf_r+0x78>
 80025ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80025ee:	460c      	mov	r4, r1
 80025f0:	2001      	movs	r0, #1
 80025f2:	e7a6      	b.n	8002542 <_vfiprintf_r+0xfe>
 80025f4:	2300      	movs	r3, #0
 80025f6:	3401      	adds	r4, #1
 80025f8:	9305      	str	r3, [sp, #20]
 80025fa:	4619      	mov	r1, r3
 80025fc:	f04f 0c0a 	mov.w	ip, #10
 8002600:	4620      	mov	r0, r4
 8002602:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002606:	3a30      	subs	r2, #48	; 0x30
 8002608:	2a09      	cmp	r2, #9
 800260a:	d903      	bls.n	8002614 <_vfiprintf_r+0x1d0>
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0c6      	beq.n	800259e <_vfiprintf_r+0x15a>
 8002610:	9105      	str	r1, [sp, #20]
 8002612:	e7c4      	b.n	800259e <_vfiprintf_r+0x15a>
 8002614:	fb0c 2101 	mla	r1, ip, r1, r2
 8002618:	4604      	mov	r4, r0
 800261a:	2301      	movs	r3, #1
 800261c:	e7f0      	b.n	8002600 <_vfiprintf_r+0x1bc>
 800261e:	ab03      	add	r3, sp, #12
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	462a      	mov	r2, r5
 8002624:	4b12      	ldr	r3, [pc, #72]	; (8002670 <_vfiprintf_r+0x22c>)
 8002626:	a904      	add	r1, sp, #16
 8002628:	4630      	mov	r0, r6
 800262a:	f3af 8000 	nop.w
 800262e:	4607      	mov	r7, r0
 8002630:	1c78      	adds	r0, r7, #1
 8002632:	d1d6      	bne.n	80025e2 <_vfiprintf_r+0x19e>
 8002634:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002636:	07d9      	lsls	r1, r3, #31
 8002638:	d405      	bmi.n	8002646 <_vfiprintf_r+0x202>
 800263a:	89ab      	ldrh	r3, [r5, #12]
 800263c:	059a      	lsls	r2, r3, #22
 800263e:	d402      	bmi.n	8002646 <_vfiprintf_r+0x202>
 8002640:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002642:	f7ff fddb 	bl	80021fc <__retarget_lock_release_recursive>
 8002646:	89ab      	ldrh	r3, [r5, #12]
 8002648:	065b      	lsls	r3, r3, #25
 800264a:	f53f af1d 	bmi.w	8002488 <_vfiprintf_r+0x44>
 800264e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002650:	e71c      	b.n	800248c <_vfiprintf_r+0x48>
 8002652:	ab03      	add	r3, sp, #12
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	462a      	mov	r2, r5
 8002658:	4b05      	ldr	r3, [pc, #20]	; (8002670 <_vfiprintf_r+0x22c>)
 800265a:	a904      	add	r1, sp, #16
 800265c:	4630      	mov	r0, r6
 800265e:	f000 f879 	bl	8002754 <_printf_i>
 8002662:	e7e4      	b.n	800262e <_vfiprintf_r+0x1ea>
 8002664:	08002d84 	.word	0x08002d84
 8002668:	08002d8e 	.word	0x08002d8e
 800266c:	00000000 	.word	0x00000000
 8002670:	0800241f 	.word	0x0800241f
 8002674:	08002d8a 	.word	0x08002d8a

08002678 <_printf_common>:
 8002678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800267c:	4616      	mov	r6, r2
 800267e:	4699      	mov	r9, r3
 8002680:	688a      	ldr	r2, [r1, #8]
 8002682:	690b      	ldr	r3, [r1, #16]
 8002684:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002688:	4293      	cmp	r3, r2
 800268a:	bfb8      	it	lt
 800268c:	4613      	movlt	r3, r2
 800268e:	6033      	str	r3, [r6, #0]
 8002690:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002694:	4607      	mov	r7, r0
 8002696:	460c      	mov	r4, r1
 8002698:	b10a      	cbz	r2, 800269e <_printf_common+0x26>
 800269a:	3301      	adds	r3, #1
 800269c:	6033      	str	r3, [r6, #0]
 800269e:	6823      	ldr	r3, [r4, #0]
 80026a0:	0699      	lsls	r1, r3, #26
 80026a2:	bf42      	ittt	mi
 80026a4:	6833      	ldrmi	r3, [r6, #0]
 80026a6:	3302      	addmi	r3, #2
 80026a8:	6033      	strmi	r3, [r6, #0]
 80026aa:	6825      	ldr	r5, [r4, #0]
 80026ac:	f015 0506 	ands.w	r5, r5, #6
 80026b0:	d106      	bne.n	80026c0 <_printf_common+0x48>
 80026b2:	f104 0a19 	add.w	sl, r4, #25
 80026b6:	68e3      	ldr	r3, [r4, #12]
 80026b8:	6832      	ldr	r2, [r6, #0]
 80026ba:	1a9b      	subs	r3, r3, r2
 80026bc:	42ab      	cmp	r3, r5
 80026be:	dc26      	bgt.n	800270e <_printf_common+0x96>
 80026c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80026c4:	1e13      	subs	r3, r2, #0
 80026c6:	6822      	ldr	r2, [r4, #0]
 80026c8:	bf18      	it	ne
 80026ca:	2301      	movne	r3, #1
 80026cc:	0692      	lsls	r2, r2, #26
 80026ce:	d42b      	bmi.n	8002728 <_printf_common+0xb0>
 80026d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80026d4:	4649      	mov	r1, r9
 80026d6:	4638      	mov	r0, r7
 80026d8:	47c0      	blx	r8
 80026da:	3001      	adds	r0, #1
 80026dc:	d01e      	beq.n	800271c <_printf_common+0xa4>
 80026de:	6823      	ldr	r3, [r4, #0]
 80026e0:	6922      	ldr	r2, [r4, #16]
 80026e2:	f003 0306 	and.w	r3, r3, #6
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	bf02      	ittt	eq
 80026ea:	68e5      	ldreq	r5, [r4, #12]
 80026ec:	6833      	ldreq	r3, [r6, #0]
 80026ee:	1aed      	subeq	r5, r5, r3
 80026f0:	68a3      	ldr	r3, [r4, #8]
 80026f2:	bf0c      	ite	eq
 80026f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80026f8:	2500      	movne	r5, #0
 80026fa:	4293      	cmp	r3, r2
 80026fc:	bfc4      	itt	gt
 80026fe:	1a9b      	subgt	r3, r3, r2
 8002700:	18ed      	addgt	r5, r5, r3
 8002702:	2600      	movs	r6, #0
 8002704:	341a      	adds	r4, #26
 8002706:	42b5      	cmp	r5, r6
 8002708:	d11a      	bne.n	8002740 <_printf_common+0xc8>
 800270a:	2000      	movs	r0, #0
 800270c:	e008      	b.n	8002720 <_printf_common+0xa8>
 800270e:	2301      	movs	r3, #1
 8002710:	4652      	mov	r2, sl
 8002712:	4649      	mov	r1, r9
 8002714:	4638      	mov	r0, r7
 8002716:	47c0      	blx	r8
 8002718:	3001      	adds	r0, #1
 800271a:	d103      	bne.n	8002724 <_printf_common+0xac>
 800271c:	f04f 30ff 	mov.w	r0, #4294967295
 8002720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002724:	3501      	adds	r5, #1
 8002726:	e7c6      	b.n	80026b6 <_printf_common+0x3e>
 8002728:	18e1      	adds	r1, r4, r3
 800272a:	1c5a      	adds	r2, r3, #1
 800272c:	2030      	movs	r0, #48	; 0x30
 800272e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002732:	4422      	add	r2, r4
 8002734:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002738:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800273c:	3302      	adds	r3, #2
 800273e:	e7c7      	b.n	80026d0 <_printf_common+0x58>
 8002740:	2301      	movs	r3, #1
 8002742:	4622      	mov	r2, r4
 8002744:	4649      	mov	r1, r9
 8002746:	4638      	mov	r0, r7
 8002748:	47c0      	blx	r8
 800274a:	3001      	adds	r0, #1
 800274c:	d0e6      	beq.n	800271c <_printf_common+0xa4>
 800274e:	3601      	adds	r6, #1
 8002750:	e7d9      	b.n	8002706 <_printf_common+0x8e>
	...

08002754 <_printf_i>:
 8002754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002758:	7e0f      	ldrb	r7, [r1, #24]
 800275a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800275c:	2f78      	cmp	r7, #120	; 0x78
 800275e:	4691      	mov	r9, r2
 8002760:	4680      	mov	r8, r0
 8002762:	460c      	mov	r4, r1
 8002764:	469a      	mov	sl, r3
 8002766:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800276a:	d807      	bhi.n	800277c <_printf_i+0x28>
 800276c:	2f62      	cmp	r7, #98	; 0x62
 800276e:	d80a      	bhi.n	8002786 <_printf_i+0x32>
 8002770:	2f00      	cmp	r7, #0
 8002772:	f000 80d4 	beq.w	800291e <_printf_i+0x1ca>
 8002776:	2f58      	cmp	r7, #88	; 0x58
 8002778:	f000 80c0 	beq.w	80028fc <_printf_i+0x1a8>
 800277c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002780:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002784:	e03a      	b.n	80027fc <_printf_i+0xa8>
 8002786:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800278a:	2b15      	cmp	r3, #21
 800278c:	d8f6      	bhi.n	800277c <_printf_i+0x28>
 800278e:	a101      	add	r1, pc, #4	; (adr r1, 8002794 <_printf_i+0x40>)
 8002790:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002794:	080027ed 	.word	0x080027ed
 8002798:	08002801 	.word	0x08002801
 800279c:	0800277d 	.word	0x0800277d
 80027a0:	0800277d 	.word	0x0800277d
 80027a4:	0800277d 	.word	0x0800277d
 80027a8:	0800277d 	.word	0x0800277d
 80027ac:	08002801 	.word	0x08002801
 80027b0:	0800277d 	.word	0x0800277d
 80027b4:	0800277d 	.word	0x0800277d
 80027b8:	0800277d 	.word	0x0800277d
 80027bc:	0800277d 	.word	0x0800277d
 80027c0:	08002905 	.word	0x08002905
 80027c4:	0800282d 	.word	0x0800282d
 80027c8:	080028bf 	.word	0x080028bf
 80027cc:	0800277d 	.word	0x0800277d
 80027d0:	0800277d 	.word	0x0800277d
 80027d4:	08002927 	.word	0x08002927
 80027d8:	0800277d 	.word	0x0800277d
 80027dc:	0800282d 	.word	0x0800282d
 80027e0:	0800277d 	.word	0x0800277d
 80027e4:	0800277d 	.word	0x0800277d
 80027e8:	080028c7 	.word	0x080028c7
 80027ec:	682b      	ldr	r3, [r5, #0]
 80027ee:	1d1a      	adds	r2, r3, #4
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	602a      	str	r2, [r5, #0]
 80027f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80027f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80027fc:	2301      	movs	r3, #1
 80027fe:	e09f      	b.n	8002940 <_printf_i+0x1ec>
 8002800:	6820      	ldr	r0, [r4, #0]
 8002802:	682b      	ldr	r3, [r5, #0]
 8002804:	0607      	lsls	r7, r0, #24
 8002806:	f103 0104 	add.w	r1, r3, #4
 800280a:	6029      	str	r1, [r5, #0]
 800280c:	d501      	bpl.n	8002812 <_printf_i+0xbe>
 800280e:	681e      	ldr	r6, [r3, #0]
 8002810:	e003      	b.n	800281a <_printf_i+0xc6>
 8002812:	0646      	lsls	r6, r0, #25
 8002814:	d5fb      	bpl.n	800280e <_printf_i+0xba>
 8002816:	f9b3 6000 	ldrsh.w	r6, [r3]
 800281a:	2e00      	cmp	r6, #0
 800281c:	da03      	bge.n	8002826 <_printf_i+0xd2>
 800281e:	232d      	movs	r3, #45	; 0x2d
 8002820:	4276      	negs	r6, r6
 8002822:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002826:	485a      	ldr	r0, [pc, #360]	; (8002990 <_printf_i+0x23c>)
 8002828:	230a      	movs	r3, #10
 800282a:	e012      	b.n	8002852 <_printf_i+0xfe>
 800282c:	682b      	ldr	r3, [r5, #0]
 800282e:	6820      	ldr	r0, [r4, #0]
 8002830:	1d19      	adds	r1, r3, #4
 8002832:	6029      	str	r1, [r5, #0]
 8002834:	0605      	lsls	r5, r0, #24
 8002836:	d501      	bpl.n	800283c <_printf_i+0xe8>
 8002838:	681e      	ldr	r6, [r3, #0]
 800283a:	e002      	b.n	8002842 <_printf_i+0xee>
 800283c:	0641      	lsls	r1, r0, #25
 800283e:	d5fb      	bpl.n	8002838 <_printf_i+0xe4>
 8002840:	881e      	ldrh	r6, [r3, #0]
 8002842:	4853      	ldr	r0, [pc, #332]	; (8002990 <_printf_i+0x23c>)
 8002844:	2f6f      	cmp	r7, #111	; 0x6f
 8002846:	bf0c      	ite	eq
 8002848:	2308      	moveq	r3, #8
 800284a:	230a      	movne	r3, #10
 800284c:	2100      	movs	r1, #0
 800284e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002852:	6865      	ldr	r5, [r4, #4]
 8002854:	60a5      	str	r5, [r4, #8]
 8002856:	2d00      	cmp	r5, #0
 8002858:	bfa2      	ittt	ge
 800285a:	6821      	ldrge	r1, [r4, #0]
 800285c:	f021 0104 	bicge.w	r1, r1, #4
 8002860:	6021      	strge	r1, [r4, #0]
 8002862:	b90e      	cbnz	r6, 8002868 <_printf_i+0x114>
 8002864:	2d00      	cmp	r5, #0
 8002866:	d04b      	beq.n	8002900 <_printf_i+0x1ac>
 8002868:	4615      	mov	r5, r2
 800286a:	fbb6 f1f3 	udiv	r1, r6, r3
 800286e:	fb03 6711 	mls	r7, r3, r1, r6
 8002872:	5dc7      	ldrb	r7, [r0, r7]
 8002874:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002878:	4637      	mov	r7, r6
 800287a:	42bb      	cmp	r3, r7
 800287c:	460e      	mov	r6, r1
 800287e:	d9f4      	bls.n	800286a <_printf_i+0x116>
 8002880:	2b08      	cmp	r3, #8
 8002882:	d10b      	bne.n	800289c <_printf_i+0x148>
 8002884:	6823      	ldr	r3, [r4, #0]
 8002886:	07de      	lsls	r6, r3, #31
 8002888:	d508      	bpl.n	800289c <_printf_i+0x148>
 800288a:	6923      	ldr	r3, [r4, #16]
 800288c:	6861      	ldr	r1, [r4, #4]
 800288e:	4299      	cmp	r1, r3
 8002890:	bfde      	ittt	le
 8002892:	2330      	movle	r3, #48	; 0x30
 8002894:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002898:	f105 35ff 	addle.w	r5, r5, #4294967295
 800289c:	1b52      	subs	r2, r2, r5
 800289e:	6122      	str	r2, [r4, #16]
 80028a0:	f8cd a000 	str.w	sl, [sp]
 80028a4:	464b      	mov	r3, r9
 80028a6:	aa03      	add	r2, sp, #12
 80028a8:	4621      	mov	r1, r4
 80028aa:	4640      	mov	r0, r8
 80028ac:	f7ff fee4 	bl	8002678 <_printf_common>
 80028b0:	3001      	adds	r0, #1
 80028b2:	d14a      	bne.n	800294a <_printf_i+0x1f6>
 80028b4:	f04f 30ff 	mov.w	r0, #4294967295
 80028b8:	b004      	add	sp, #16
 80028ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028be:	6823      	ldr	r3, [r4, #0]
 80028c0:	f043 0320 	orr.w	r3, r3, #32
 80028c4:	6023      	str	r3, [r4, #0]
 80028c6:	4833      	ldr	r0, [pc, #204]	; (8002994 <_printf_i+0x240>)
 80028c8:	2778      	movs	r7, #120	; 0x78
 80028ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80028ce:	6823      	ldr	r3, [r4, #0]
 80028d0:	6829      	ldr	r1, [r5, #0]
 80028d2:	061f      	lsls	r7, r3, #24
 80028d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80028d8:	d402      	bmi.n	80028e0 <_printf_i+0x18c>
 80028da:	065f      	lsls	r7, r3, #25
 80028dc:	bf48      	it	mi
 80028de:	b2b6      	uxthmi	r6, r6
 80028e0:	07df      	lsls	r7, r3, #31
 80028e2:	bf48      	it	mi
 80028e4:	f043 0320 	orrmi.w	r3, r3, #32
 80028e8:	6029      	str	r1, [r5, #0]
 80028ea:	bf48      	it	mi
 80028ec:	6023      	strmi	r3, [r4, #0]
 80028ee:	b91e      	cbnz	r6, 80028f8 <_printf_i+0x1a4>
 80028f0:	6823      	ldr	r3, [r4, #0]
 80028f2:	f023 0320 	bic.w	r3, r3, #32
 80028f6:	6023      	str	r3, [r4, #0]
 80028f8:	2310      	movs	r3, #16
 80028fa:	e7a7      	b.n	800284c <_printf_i+0xf8>
 80028fc:	4824      	ldr	r0, [pc, #144]	; (8002990 <_printf_i+0x23c>)
 80028fe:	e7e4      	b.n	80028ca <_printf_i+0x176>
 8002900:	4615      	mov	r5, r2
 8002902:	e7bd      	b.n	8002880 <_printf_i+0x12c>
 8002904:	682b      	ldr	r3, [r5, #0]
 8002906:	6826      	ldr	r6, [r4, #0]
 8002908:	6961      	ldr	r1, [r4, #20]
 800290a:	1d18      	adds	r0, r3, #4
 800290c:	6028      	str	r0, [r5, #0]
 800290e:	0635      	lsls	r5, r6, #24
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	d501      	bpl.n	8002918 <_printf_i+0x1c4>
 8002914:	6019      	str	r1, [r3, #0]
 8002916:	e002      	b.n	800291e <_printf_i+0x1ca>
 8002918:	0670      	lsls	r0, r6, #25
 800291a:	d5fb      	bpl.n	8002914 <_printf_i+0x1c0>
 800291c:	8019      	strh	r1, [r3, #0]
 800291e:	2300      	movs	r3, #0
 8002920:	6123      	str	r3, [r4, #16]
 8002922:	4615      	mov	r5, r2
 8002924:	e7bc      	b.n	80028a0 <_printf_i+0x14c>
 8002926:	682b      	ldr	r3, [r5, #0]
 8002928:	1d1a      	adds	r2, r3, #4
 800292a:	602a      	str	r2, [r5, #0]
 800292c:	681d      	ldr	r5, [r3, #0]
 800292e:	6862      	ldr	r2, [r4, #4]
 8002930:	2100      	movs	r1, #0
 8002932:	4628      	mov	r0, r5
 8002934:	f7fd fc54 	bl	80001e0 <memchr>
 8002938:	b108      	cbz	r0, 800293e <_printf_i+0x1ea>
 800293a:	1b40      	subs	r0, r0, r5
 800293c:	6060      	str	r0, [r4, #4]
 800293e:	6863      	ldr	r3, [r4, #4]
 8002940:	6123      	str	r3, [r4, #16]
 8002942:	2300      	movs	r3, #0
 8002944:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002948:	e7aa      	b.n	80028a0 <_printf_i+0x14c>
 800294a:	6923      	ldr	r3, [r4, #16]
 800294c:	462a      	mov	r2, r5
 800294e:	4649      	mov	r1, r9
 8002950:	4640      	mov	r0, r8
 8002952:	47d0      	blx	sl
 8002954:	3001      	adds	r0, #1
 8002956:	d0ad      	beq.n	80028b4 <_printf_i+0x160>
 8002958:	6823      	ldr	r3, [r4, #0]
 800295a:	079b      	lsls	r3, r3, #30
 800295c:	d413      	bmi.n	8002986 <_printf_i+0x232>
 800295e:	68e0      	ldr	r0, [r4, #12]
 8002960:	9b03      	ldr	r3, [sp, #12]
 8002962:	4298      	cmp	r0, r3
 8002964:	bfb8      	it	lt
 8002966:	4618      	movlt	r0, r3
 8002968:	e7a6      	b.n	80028b8 <_printf_i+0x164>
 800296a:	2301      	movs	r3, #1
 800296c:	4632      	mov	r2, r6
 800296e:	4649      	mov	r1, r9
 8002970:	4640      	mov	r0, r8
 8002972:	47d0      	blx	sl
 8002974:	3001      	adds	r0, #1
 8002976:	d09d      	beq.n	80028b4 <_printf_i+0x160>
 8002978:	3501      	adds	r5, #1
 800297a:	68e3      	ldr	r3, [r4, #12]
 800297c:	9903      	ldr	r1, [sp, #12]
 800297e:	1a5b      	subs	r3, r3, r1
 8002980:	42ab      	cmp	r3, r5
 8002982:	dcf2      	bgt.n	800296a <_printf_i+0x216>
 8002984:	e7eb      	b.n	800295e <_printf_i+0x20a>
 8002986:	2500      	movs	r5, #0
 8002988:	f104 0619 	add.w	r6, r4, #25
 800298c:	e7f5      	b.n	800297a <_printf_i+0x226>
 800298e:	bf00      	nop
 8002990:	08002d95 	.word	0x08002d95
 8002994:	08002da6 	.word	0x08002da6

08002998 <__sflush_r>:
 8002998:	898a      	ldrh	r2, [r1, #12]
 800299a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800299e:	4605      	mov	r5, r0
 80029a0:	0710      	lsls	r0, r2, #28
 80029a2:	460c      	mov	r4, r1
 80029a4:	d458      	bmi.n	8002a58 <__sflush_r+0xc0>
 80029a6:	684b      	ldr	r3, [r1, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	dc05      	bgt.n	80029b8 <__sflush_r+0x20>
 80029ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	dc02      	bgt.n	80029b8 <__sflush_r+0x20>
 80029b2:	2000      	movs	r0, #0
 80029b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80029ba:	2e00      	cmp	r6, #0
 80029bc:	d0f9      	beq.n	80029b2 <__sflush_r+0x1a>
 80029be:	2300      	movs	r3, #0
 80029c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80029c4:	682f      	ldr	r7, [r5, #0]
 80029c6:	6a21      	ldr	r1, [r4, #32]
 80029c8:	602b      	str	r3, [r5, #0]
 80029ca:	d032      	beq.n	8002a32 <__sflush_r+0x9a>
 80029cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80029ce:	89a3      	ldrh	r3, [r4, #12]
 80029d0:	075a      	lsls	r2, r3, #29
 80029d2:	d505      	bpl.n	80029e0 <__sflush_r+0x48>
 80029d4:	6863      	ldr	r3, [r4, #4]
 80029d6:	1ac0      	subs	r0, r0, r3
 80029d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80029da:	b10b      	cbz	r3, 80029e0 <__sflush_r+0x48>
 80029dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80029de:	1ac0      	subs	r0, r0, r3
 80029e0:	2300      	movs	r3, #0
 80029e2:	4602      	mov	r2, r0
 80029e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80029e6:	6a21      	ldr	r1, [r4, #32]
 80029e8:	4628      	mov	r0, r5
 80029ea:	47b0      	blx	r6
 80029ec:	1c43      	adds	r3, r0, #1
 80029ee:	89a3      	ldrh	r3, [r4, #12]
 80029f0:	d106      	bne.n	8002a00 <__sflush_r+0x68>
 80029f2:	6829      	ldr	r1, [r5, #0]
 80029f4:	291d      	cmp	r1, #29
 80029f6:	d82b      	bhi.n	8002a50 <__sflush_r+0xb8>
 80029f8:	4a29      	ldr	r2, [pc, #164]	; (8002aa0 <__sflush_r+0x108>)
 80029fa:	410a      	asrs	r2, r1
 80029fc:	07d6      	lsls	r6, r2, #31
 80029fe:	d427      	bmi.n	8002a50 <__sflush_r+0xb8>
 8002a00:	2200      	movs	r2, #0
 8002a02:	6062      	str	r2, [r4, #4]
 8002a04:	04d9      	lsls	r1, r3, #19
 8002a06:	6922      	ldr	r2, [r4, #16]
 8002a08:	6022      	str	r2, [r4, #0]
 8002a0a:	d504      	bpl.n	8002a16 <__sflush_r+0x7e>
 8002a0c:	1c42      	adds	r2, r0, #1
 8002a0e:	d101      	bne.n	8002a14 <__sflush_r+0x7c>
 8002a10:	682b      	ldr	r3, [r5, #0]
 8002a12:	b903      	cbnz	r3, 8002a16 <__sflush_r+0x7e>
 8002a14:	6560      	str	r0, [r4, #84]	; 0x54
 8002a16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a18:	602f      	str	r7, [r5, #0]
 8002a1a:	2900      	cmp	r1, #0
 8002a1c:	d0c9      	beq.n	80029b2 <__sflush_r+0x1a>
 8002a1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002a22:	4299      	cmp	r1, r3
 8002a24:	d002      	beq.n	8002a2c <__sflush_r+0x94>
 8002a26:	4628      	mov	r0, r5
 8002a28:	f7ff fbea 	bl	8002200 <_free_r>
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	6360      	str	r0, [r4, #52]	; 0x34
 8002a30:	e7c0      	b.n	80029b4 <__sflush_r+0x1c>
 8002a32:	2301      	movs	r3, #1
 8002a34:	4628      	mov	r0, r5
 8002a36:	47b0      	blx	r6
 8002a38:	1c41      	adds	r1, r0, #1
 8002a3a:	d1c8      	bne.n	80029ce <__sflush_r+0x36>
 8002a3c:	682b      	ldr	r3, [r5, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0c5      	beq.n	80029ce <__sflush_r+0x36>
 8002a42:	2b1d      	cmp	r3, #29
 8002a44:	d001      	beq.n	8002a4a <__sflush_r+0xb2>
 8002a46:	2b16      	cmp	r3, #22
 8002a48:	d101      	bne.n	8002a4e <__sflush_r+0xb6>
 8002a4a:	602f      	str	r7, [r5, #0]
 8002a4c:	e7b1      	b.n	80029b2 <__sflush_r+0x1a>
 8002a4e:	89a3      	ldrh	r3, [r4, #12]
 8002a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a54:	81a3      	strh	r3, [r4, #12]
 8002a56:	e7ad      	b.n	80029b4 <__sflush_r+0x1c>
 8002a58:	690f      	ldr	r7, [r1, #16]
 8002a5a:	2f00      	cmp	r7, #0
 8002a5c:	d0a9      	beq.n	80029b2 <__sflush_r+0x1a>
 8002a5e:	0793      	lsls	r3, r2, #30
 8002a60:	680e      	ldr	r6, [r1, #0]
 8002a62:	bf08      	it	eq
 8002a64:	694b      	ldreq	r3, [r1, #20]
 8002a66:	600f      	str	r7, [r1, #0]
 8002a68:	bf18      	it	ne
 8002a6a:	2300      	movne	r3, #0
 8002a6c:	eba6 0807 	sub.w	r8, r6, r7
 8002a70:	608b      	str	r3, [r1, #8]
 8002a72:	f1b8 0f00 	cmp.w	r8, #0
 8002a76:	dd9c      	ble.n	80029b2 <__sflush_r+0x1a>
 8002a78:	6a21      	ldr	r1, [r4, #32]
 8002a7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002a7c:	4643      	mov	r3, r8
 8002a7e:	463a      	mov	r2, r7
 8002a80:	4628      	mov	r0, r5
 8002a82:	47b0      	blx	r6
 8002a84:	2800      	cmp	r0, #0
 8002a86:	dc06      	bgt.n	8002a96 <__sflush_r+0xfe>
 8002a88:	89a3      	ldrh	r3, [r4, #12]
 8002a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a8e:	81a3      	strh	r3, [r4, #12]
 8002a90:	f04f 30ff 	mov.w	r0, #4294967295
 8002a94:	e78e      	b.n	80029b4 <__sflush_r+0x1c>
 8002a96:	4407      	add	r7, r0
 8002a98:	eba8 0800 	sub.w	r8, r8, r0
 8002a9c:	e7e9      	b.n	8002a72 <__sflush_r+0xda>
 8002a9e:	bf00      	nop
 8002aa0:	dfbffffe 	.word	0xdfbffffe

08002aa4 <_fflush_r>:
 8002aa4:	b538      	push	{r3, r4, r5, lr}
 8002aa6:	690b      	ldr	r3, [r1, #16]
 8002aa8:	4605      	mov	r5, r0
 8002aaa:	460c      	mov	r4, r1
 8002aac:	b913      	cbnz	r3, 8002ab4 <_fflush_r+0x10>
 8002aae:	2500      	movs	r5, #0
 8002ab0:	4628      	mov	r0, r5
 8002ab2:	bd38      	pop	{r3, r4, r5, pc}
 8002ab4:	b118      	cbz	r0, 8002abe <_fflush_r+0x1a>
 8002ab6:	6a03      	ldr	r3, [r0, #32]
 8002ab8:	b90b      	cbnz	r3, 8002abe <_fflush_r+0x1a>
 8002aba:	f7ff fa99 	bl	8001ff0 <__sinit>
 8002abe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f3      	beq.n	8002aae <_fflush_r+0xa>
 8002ac6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002ac8:	07d0      	lsls	r0, r2, #31
 8002aca:	d404      	bmi.n	8002ad6 <_fflush_r+0x32>
 8002acc:	0599      	lsls	r1, r3, #22
 8002ace:	d402      	bmi.n	8002ad6 <_fflush_r+0x32>
 8002ad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ad2:	f7ff fb92 	bl	80021fa <__retarget_lock_acquire_recursive>
 8002ad6:	4628      	mov	r0, r5
 8002ad8:	4621      	mov	r1, r4
 8002ada:	f7ff ff5d 	bl	8002998 <__sflush_r>
 8002ade:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ae0:	07da      	lsls	r2, r3, #31
 8002ae2:	4605      	mov	r5, r0
 8002ae4:	d4e4      	bmi.n	8002ab0 <_fflush_r+0xc>
 8002ae6:	89a3      	ldrh	r3, [r4, #12]
 8002ae8:	059b      	lsls	r3, r3, #22
 8002aea:	d4e1      	bmi.n	8002ab0 <_fflush_r+0xc>
 8002aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002aee:	f7ff fb85 	bl	80021fc <__retarget_lock_release_recursive>
 8002af2:	e7dd      	b.n	8002ab0 <_fflush_r+0xc>

08002af4 <__swbuf_r>:
 8002af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002af6:	460e      	mov	r6, r1
 8002af8:	4614      	mov	r4, r2
 8002afa:	4605      	mov	r5, r0
 8002afc:	b118      	cbz	r0, 8002b06 <__swbuf_r+0x12>
 8002afe:	6a03      	ldr	r3, [r0, #32]
 8002b00:	b90b      	cbnz	r3, 8002b06 <__swbuf_r+0x12>
 8002b02:	f7ff fa75 	bl	8001ff0 <__sinit>
 8002b06:	69a3      	ldr	r3, [r4, #24]
 8002b08:	60a3      	str	r3, [r4, #8]
 8002b0a:	89a3      	ldrh	r3, [r4, #12]
 8002b0c:	071a      	lsls	r2, r3, #28
 8002b0e:	d525      	bpl.n	8002b5c <__swbuf_r+0x68>
 8002b10:	6923      	ldr	r3, [r4, #16]
 8002b12:	b31b      	cbz	r3, 8002b5c <__swbuf_r+0x68>
 8002b14:	6823      	ldr	r3, [r4, #0]
 8002b16:	6922      	ldr	r2, [r4, #16]
 8002b18:	1a98      	subs	r0, r3, r2
 8002b1a:	6963      	ldr	r3, [r4, #20]
 8002b1c:	b2f6      	uxtb	r6, r6
 8002b1e:	4283      	cmp	r3, r0
 8002b20:	4637      	mov	r7, r6
 8002b22:	dc04      	bgt.n	8002b2e <__swbuf_r+0x3a>
 8002b24:	4621      	mov	r1, r4
 8002b26:	4628      	mov	r0, r5
 8002b28:	f7ff ffbc 	bl	8002aa4 <_fflush_r>
 8002b2c:	b9e0      	cbnz	r0, 8002b68 <__swbuf_r+0x74>
 8002b2e:	68a3      	ldr	r3, [r4, #8]
 8002b30:	3b01      	subs	r3, #1
 8002b32:	60a3      	str	r3, [r4, #8]
 8002b34:	6823      	ldr	r3, [r4, #0]
 8002b36:	1c5a      	adds	r2, r3, #1
 8002b38:	6022      	str	r2, [r4, #0]
 8002b3a:	701e      	strb	r6, [r3, #0]
 8002b3c:	6962      	ldr	r2, [r4, #20]
 8002b3e:	1c43      	adds	r3, r0, #1
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d004      	beq.n	8002b4e <__swbuf_r+0x5a>
 8002b44:	89a3      	ldrh	r3, [r4, #12]
 8002b46:	07db      	lsls	r3, r3, #31
 8002b48:	d506      	bpl.n	8002b58 <__swbuf_r+0x64>
 8002b4a:	2e0a      	cmp	r6, #10
 8002b4c:	d104      	bne.n	8002b58 <__swbuf_r+0x64>
 8002b4e:	4621      	mov	r1, r4
 8002b50:	4628      	mov	r0, r5
 8002b52:	f7ff ffa7 	bl	8002aa4 <_fflush_r>
 8002b56:	b938      	cbnz	r0, 8002b68 <__swbuf_r+0x74>
 8002b58:	4638      	mov	r0, r7
 8002b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b5c:	4621      	mov	r1, r4
 8002b5e:	4628      	mov	r0, r5
 8002b60:	f000 f806 	bl	8002b70 <__swsetup_r>
 8002b64:	2800      	cmp	r0, #0
 8002b66:	d0d5      	beq.n	8002b14 <__swbuf_r+0x20>
 8002b68:	f04f 37ff 	mov.w	r7, #4294967295
 8002b6c:	e7f4      	b.n	8002b58 <__swbuf_r+0x64>
	...

08002b70 <__swsetup_r>:
 8002b70:	b538      	push	{r3, r4, r5, lr}
 8002b72:	4b2a      	ldr	r3, [pc, #168]	; (8002c1c <__swsetup_r+0xac>)
 8002b74:	4605      	mov	r5, r0
 8002b76:	6818      	ldr	r0, [r3, #0]
 8002b78:	460c      	mov	r4, r1
 8002b7a:	b118      	cbz	r0, 8002b84 <__swsetup_r+0x14>
 8002b7c:	6a03      	ldr	r3, [r0, #32]
 8002b7e:	b90b      	cbnz	r3, 8002b84 <__swsetup_r+0x14>
 8002b80:	f7ff fa36 	bl	8001ff0 <__sinit>
 8002b84:	89a3      	ldrh	r3, [r4, #12]
 8002b86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002b8a:	0718      	lsls	r0, r3, #28
 8002b8c:	d422      	bmi.n	8002bd4 <__swsetup_r+0x64>
 8002b8e:	06d9      	lsls	r1, r3, #27
 8002b90:	d407      	bmi.n	8002ba2 <__swsetup_r+0x32>
 8002b92:	2309      	movs	r3, #9
 8002b94:	602b      	str	r3, [r5, #0]
 8002b96:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002b9a:	81a3      	strh	r3, [r4, #12]
 8002b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba0:	e034      	b.n	8002c0c <__swsetup_r+0x9c>
 8002ba2:	0758      	lsls	r0, r3, #29
 8002ba4:	d512      	bpl.n	8002bcc <__swsetup_r+0x5c>
 8002ba6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ba8:	b141      	cbz	r1, 8002bbc <__swsetup_r+0x4c>
 8002baa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002bae:	4299      	cmp	r1, r3
 8002bb0:	d002      	beq.n	8002bb8 <__swsetup_r+0x48>
 8002bb2:	4628      	mov	r0, r5
 8002bb4:	f7ff fb24 	bl	8002200 <_free_r>
 8002bb8:	2300      	movs	r3, #0
 8002bba:	6363      	str	r3, [r4, #52]	; 0x34
 8002bbc:	89a3      	ldrh	r3, [r4, #12]
 8002bbe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002bc2:	81a3      	strh	r3, [r4, #12]
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	6063      	str	r3, [r4, #4]
 8002bc8:	6923      	ldr	r3, [r4, #16]
 8002bca:	6023      	str	r3, [r4, #0]
 8002bcc:	89a3      	ldrh	r3, [r4, #12]
 8002bce:	f043 0308 	orr.w	r3, r3, #8
 8002bd2:	81a3      	strh	r3, [r4, #12]
 8002bd4:	6923      	ldr	r3, [r4, #16]
 8002bd6:	b94b      	cbnz	r3, 8002bec <__swsetup_r+0x7c>
 8002bd8:	89a3      	ldrh	r3, [r4, #12]
 8002bda:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002bde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002be2:	d003      	beq.n	8002bec <__swsetup_r+0x7c>
 8002be4:	4621      	mov	r1, r4
 8002be6:	4628      	mov	r0, r5
 8002be8:	f000 f850 	bl	8002c8c <__smakebuf_r>
 8002bec:	89a0      	ldrh	r0, [r4, #12]
 8002bee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002bf2:	f010 0301 	ands.w	r3, r0, #1
 8002bf6:	d00a      	beq.n	8002c0e <__swsetup_r+0x9e>
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60a3      	str	r3, [r4, #8]
 8002bfc:	6963      	ldr	r3, [r4, #20]
 8002bfe:	425b      	negs	r3, r3
 8002c00:	61a3      	str	r3, [r4, #24]
 8002c02:	6923      	ldr	r3, [r4, #16]
 8002c04:	b943      	cbnz	r3, 8002c18 <__swsetup_r+0xa8>
 8002c06:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002c0a:	d1c4      	bne.n	8002b96 <__swsetup_r+0x26>
 8002c0c:	bd38      	pop	{r3, r4, r5, pc}
 8002c0e:	0781      	lsls	r1, r0, #30
 8002c10:	bf58      	it	pl
 8002c12:	6963      	ldrpl	r3, [r4, #20]
 8002c14:	60a3      	str	r3, [r4, #8]
 8002c16:	e7f4      	b.n	8002c02 <__swsetup_r+0x92>
 8002c18:	2000      	movs	r0, #0
 8002c1a:	e7f7      	b.n	8002c0c <__swsetup_r+0x9c>
 8002c1c:	20000064 	.word	0x20000064

08002c20 <_sbrk_r>:
 8002c20:	b538      	push	{r3, r4, r5, lr}
 8002c22:	4d06      	ldr	r5, [pc, #24]	; (8002c3c <_sbrk_r+0x1c>)
 8002c24:	2300      	movs	r3, #0
 8002c26:	4604      	mov	r4, r0
 8002c28:	4608      	mov	r0, r1
 8002c2a:	602b      	str	r3, [r5, #0]
 8002c2c:	f7fd ff44 	bl	8000ab8 <_sbrk>
 8002c30:	1c43      	adds	r3, r0, #1
 8002c32:	d102      	bne.n	8002c3a <_sbrk_r+0x1a>
 8002c34:	682b      	ldr	r3, [r5, #0]
 8002c36:	b103      	cbz	r3, 8002c3a <_sbrk_r+0x1a>
 8002c38:	6023      	str	r3, [r4, #0]
 8002c3a:	bd38      	pop	{r3, r4, r5, pc}
 8002c3c:	20000210 	.word	0x20000210

08002c40 <__swhatbuf_r>:
 8002c40:	b570      	push	{r4, r5, r6, lr}
 8002c42:	460c      	mov	r4, r1
 8002c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c48:	2900      	cmp	r1, #0
 8002c4a:	b096      	sub	sp, #88	; 0x58
 8002c4c:	4615      	mov	r5, r2
 8002c4e:	461e      	mov	r6, r3
 8002c50:	da0d      	bge.n	8002c6e <__swhatbuf_r+0x2e>
 8002c52:	89a3      	ldrh	r3, [r4, #12]
 8002c54:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002c58:	f04f 0100 	mov.w	r1, #0
 8002c5c:	bf0c      	ite	eq
 8002c5e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002c62:	2340      	movne	r3, #64	; 0x40
 8002c64:	2000      	movs	r0, #0
 8002c66:	6031      	str	r1, [r6, #0]
 8002c68:	602b      	str	r3, [r5, #0]
 8002c6a:	b016      	add	sp, #88	; 0x58
 8002c6c:	bd70      	pop	{r4, r5, r6, pc}
 8002c6e:	466a      	mov	r2, sp
 8002c70:	f000 f848 	bl	8002d04 <_fstat_r>
 8002c74:	2800      	cmp	r0, #0
 8002c76:	dbec      	blt.n	8002c52 <__swhatbuf_r+0x12>
 8002c78:	9901      	ldr	r1, [sp, #4]
 8002c7a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002c7e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002c82:	4259      	negs	r1, r3
 8002c84:	4159      	adcs	r1, r3
 8002c86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c8a:	e7eb      	b.n	8002c64 <__swhatbuf_r+0x24>

08002c8c <__smakebuf_r>:
 8002c8c:	898b      	ldrh	r3, [r1, #12]
 8002c8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002c90:	079d      	lsls	r5, r3, #30
 8002c92:	4606      	mov	r6, r0
 8002c94:	460c      	mov	r4, r1
 8002c96:	d507      	bpl.n	8002ca8 <__smakebuf_r+0x1c>
 8002c98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002c9c:	6023      	str	r3, [r4, #0]
 8002c9e:	6123      	str	r3, [r4, #16]
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	6163      	str	r3, [r4, #20]
 8002ca4:	b002      	add	sp, #8
 8002ca6:	bd70      	pop	{r4, r5, r6, pc}
 8002ca8:	ab01      	add	r3, sp, #4
 8002caa:	466a      	mov	r2, sp
 8002cac:	f7ff ffc8 	bl	8002c40 <__swhatbuf_r>
 8002cb0:	9900      	ldr	r1, [sp, #0]
 8002cb2:	4605      	mov	r5, r0
 8002cb4:	4630      	mov	r0, r6
 8002cb6:	f7ff fb0f 	bl	80022d8 <_malloc_r>
 8002cba:	b948      	cbnz	r0, 8002cd0 <__smakebuf_r+0x44>
 8002cbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cc0:	059a      	lsls	r2, r3, #22
 8002cc2:	d4ef      	bmi.n	8002ca4 <__smakebuf_r+0x18>
 8002cc4:	f023 0303 	bic.w	r3, r3, #3
 8002cc8:	f043 0302 	orr.w	r3, r3, #2
 8002ccc:	81a3      	strh	r3, [r4, #12]
 8002cce:	e7e3      	b.n	8002c98 <__smakebuf_r+0xc>
 8002cd0:	89a3      	ldrh	r3, [r4, #12]
 8002cd2:	6020      	str	r0, [r4, #0]
 8002cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cd8:	81a3      	strh	r3, [r4, #12]
 8002cda:	9b00      	ldr	r3, [sp, #0]
 8002cdc:	6163      	str	r3, [r4, #20]
 8002cde:	9b01      	ldr	r3, [sp, #4]
 8002ce0:	6120      	str	r0, [r4, #16]
 8002ce2:	b15b      	cbz	r3, 8002cfc <__smakebuf_r+0x70>
 8002ce4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ce8:	4630      	mov	r0, r6
 8002cea:	f000 f81d 	bl	8002d28 <_isatty_r>
 8002cee:	b128      	cbz	r0, 8002cfc <__smakebuf_r+0x70>
 8002cf0:	89a3      	ldrh	r3, [r4, #12]
 8002cf2:	f023 0303 	bic.w	r3, r3, #3
 8002cf6:	f043 0301 	orr.w	r3, r3, #1
 8002cfa:	81a3      	strh	r3, [r4, #12]
 8002cfc:	89a3      	ldrh	r3, [r4, #12]
 8002cfe:	431d      	orrs	r5, r3
 8002d00:	81a5      	strh	r5, [r4, #12]
 8002d02:	e7cf      	b.n	8002ca4 <__smakebuf_r+0x18>

08002d04 <_fstat_r>:
 8002d04:	b538      	push	{r3, r4, r5, lr}
 8002d06:	4d07      	ldr	r5, [pc, #28]	; (8002d24 <_fstat_r+0x20>)
 8002d08:	2300      	movs	r3, #0
 8002d0a:	4604      	mov	r4, r0
 8002d0c:	4608      	mov	r0, r1
 8002d0e:	4611      	mov	r1, r2
 8002d10:	602b      	str	r3, [r5, #0]
 8002d12:	f7fd fea9 	bl	8000a68 <_fstat>
 8002d16:	1c43      	adds	r3, r0, #1
 8002d18:	d102      	bne.n	8002d20 <_fstat_r+0x1c>
 8002d1a:	682b      	ldr	r3, [r5, #0]
 8002d1c:	b103      	cbz	r3, 8002d20 <_fstat_r+0x1c>
 8002d1e:	6023      	str	r3, [r4, #0]
 8002d20:	bd38      	pop	{r3, r4, r5, pc}
 8002d22:	bf00      	nop
 8002d24:	20000210 	.word	0x20000210

08002d28 <_isatty_r>:
 8002d28:	b538      	push	{r3, r4, r5, lr}
 8002d2a:	4d06      	ldr	r5, [pc, #24]	; (8002d44 <_isatty_r+0x1c>)
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	4604      	mov	r4, r0
 8002d30:	4608      	mov	r0, r1
 8002d32:	602b      	str	r3, [r5, #0]
 8002d34:	f7fd fea8 	bl	8000a88 <_isatty>
 8002d38:	1c43      	adds	r3, r0, #1
 8002d3a:	d102      	bne.n	8002d42 <_isatty_r+0x1a>
 8002d3c:	682b      	ldr	r3, [r5, #0]
 8002d3e:	b103      	cbz	r3, 8002d42 <_isatty_r+0x1a>
 8002d40:	6023      	str	r3, [r4, #0]
 8002d42:	bd38      	pop	{r3, r4, r5, pc}
 8002d44:	20000210 	.word	0x20000210

08002d48 <_init>:
 8002d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d4a:	bf00      	nop
 8002d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d4e:	bc08      	pop	{r3}
 8002d50:	469e      	mov	lr, r3
 8002d52:	4770      	bx	lr

08002d54 <_fini>:
 8002d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d56:	bf00      	nop
 8002d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d5a:	bc08      	pop	{r3}
 8002d5c:	469e      	mov	lr, r3
 8002d5e:	4770      	bx	lr
